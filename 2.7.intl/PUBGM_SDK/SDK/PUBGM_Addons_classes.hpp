#pragma once

// PUBG MOBILE 2.7.0 SDK generated by Huy#3877 

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Addons.AnimPoseRecorder
// 0x008C (0x00A8 - 0x001C)
class UAnimPoseRecorder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8C];                                      // 0x001C(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.AnimPoseRecorder");
		return pStaticClass;
	}

};


// Class Addons.AssetPlayerSyncNode
// 0x007C (0x0098 - 0x001C)
class UAssetPlayerSyncNode : public UObject
{
public:
	TMap<struct FName, float>                          SyncGroupInternalTimerMap;                                // 0x001C(0x0050) (ZeroConstructor, Transient)
	TMap<struct FName, int>                            SyncGroupSequenceIndexMap;                                // 0x0058(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.AssetPlayerSyncNode");
		return pStaticClass;
	}


	void SetGroupTimer(const struct FName& GroupName, float InternalTime);
	void SetGroupIndex(const struct FName& GroupName, int SequenceIndex);
	float GetGroupTime(const struct FName& GroupName);
	int GetGroupIndex(const struct FName& GroupName);
};


// Class Addons.BioVehicleAnimInstanceBase
// 0x01F0 (0x04E0 - 0x02F0)
class UBioVehicleAnimInstanceBase : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x44];                                      // 0x02F0(0x0044) MISSED OFFSET
	TArray<float>                                      LOD_Level_DistanceFactor;                                 // 0x0334(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               bEnableTerrainAdapting;                                   // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableRootPositionAdaption;                              // 0x0341(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableRootRotationAdaption;                              // 0x0342(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableFootPositionAdaption;                              // 0x0343(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableFootRotationAdaption;                              // 0x0344(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	TMap<int, int>                                     DeviceLevelToEvaluateSkipMap;                             // 0x0348(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int                                                DefaultSkipEvaluateTimes;                                 // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABioVehicleBase*                             OwnerVehicle;                                             // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsServer;                                                // 0x038C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x038D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHasBeenTamed;                                            // 0x038E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAnimVarHasCached;                                        // 0x038F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHasDrivers;                                              // 0x0390(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasAnyPassengers;                                        // 0x0391(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0392(0x0002) MISSED OFFSET
	float                                              CurrentDistanceFactor;                                    // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                EvaluateSkipTimes;                                        // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                AnimLOD;                                                  // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAnimLODChanged;                                         // 0x03A0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAnimSequence*                               DeathAnim;                                                // 0x03AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UBioVehicleRiderAnimInstanceBase> DriverAnimInstance;                                       // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03B8(0x0004) MISSED OFFSET
	struct FString                                     LuaFilePath;                                              // 0x03BC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TEnumAsByte<ECollisionChannel>>             TerrainAdaption_ObjectTypesToQuery;                       // 0x03C8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bShouldUseSkipQueryOpt;                                   // 0x03D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	struct FName                                       RootTraceBoneName;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootTraceSphereRadius;                                    // 0x03E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootOffsetMaxZ;                                           // 0x03E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootOffsetMaxPitch;                                       // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootPositionLerpSpeed;                                    // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootRotationLerpSpeed;                                    // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootTraceUpOffset;                                        // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootTraceDownOffset;                                      // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FName                                       LeftFootTraceBoneName;                                    // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightFootTraceBoneName;                                   // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootTraceSphereRadius;                                    // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootPositionLerpSpeed;                                    // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootRotationLerpSpeed;                                    // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootOffsetMaxZ;                                           // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootOffsetMaxPitch;                                       // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootOffsetMaxRoll;                                        // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootTraceUpOffset;                                        // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootTraceDownOffset;                                      // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EBioVehicleTerrainAdaptingType                     TerrainAdaptingType;                                      // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              LeftFootOffsetZ;                                          // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FRotator                                    LeftFootRotatorOffset;                                    // 0x0438(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              RightFootOffsetZ;                                         // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FRotator                                    RightFootRotatorOffset;                                   // 0x0448(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              RootOffsetZ;                                              // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RootOffsetPitch;                                          // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x84];                                      // 0x045C(0x0084) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleAnimInstanceBase");
		return pStaticClass;
	}


	void UpdateTerrainAdapting(float DeltaSeconds);
	void TraceQuery();
	void NotifyDriverToDoTransition(const struct FString& ToStateMachineName);
	void LuaOnAnimLodChanged(int NewAnimLod);
	void LuaInitializeWithDeviceLevel(int DeviceLevel);
	void LuaInitializeAnimation();
	void LuaCacheAnimVarWithAnimList(class UBioVehicleAnimListComponent* RiderAnimListComponent);
	class UBioVehicleRiderAnimInstanceBase* GetDriverAnimInstance();
	void CacheAnimVarWithAnimList(class UBioVehicleAnimListComponent* AnimListComponent);
	bool BoneTrace(const struct FName& BoneName, float UpOffset, float DownOffset, float TraceSphereRadius, struct FVector* ImpactPoint, struct FVector* ImpactNormal);
};


// Class Addons.BioVehicleAnimListComponent
// 0x0058 (0x0118 - 0x00C0)
class UBioVehicleAnimListComponent : public UActorComponent
{
public:
	TArray<struct FBioVehicleRiderAnim>                BioVehicleRiderAnimData;                                  // 0x00C0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnAnimListLoadingFinished;                                // 0x00CC(0x000C) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D8(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<EBioVehiclePoseType>, class UAnimationAsset*> BioVehicleRiderAnimDataMap;                               // 0x00DC(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleAnimListComponent");
		return pStaticClass;
	}

};


// Class Addons.BioVehicleBase
// 0x02E0 (0x1360 - 0x1080)
class ABioVehicleBase : public ASTExtraVehicleBase
{
public:
	struct FScriptMulticastDelegate                    OnBioVehicleFrozen;                                       // 0x1080(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBioVehicleRunOutFuel;                                   // 0x108C(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bFuelExhausted;                                           // 0x1098(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1099(0x0003) MISSED OFFSET
	class UBioVehicleMovementComponent*                VehicleMovement;                                          // 0x109C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x10A0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               BodyBoxComponent;                                         // 0x10A4(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           HeadCapsuleComponent;                                     // 0x10A8(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleSpringArmComponent*                  BioVehicleSpringArm;                                      // 0x10AC(0x0004) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBeginAccelerate;                                        // 0x10B0(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndAccelerate;                                          // 0x10BC(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bHasAcceleration;                                         // 0x10C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHasAccelerationLastFrame;                                // 0x10C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1E];                                      // 0x10CA(0x001E) MISSED OFFSET
	struct FBasedMovementInfo                          BasedMovement;                                            // 0x10E8(0x0030)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                  // 0x1118(0x0030) (Net)
	struct FVector                                     BaseTranslationOffset;                                    // 0x1148(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x1154(0x000C) MISSED OFFSET
	struct FQuat                                       BaseRotationOffset;                                       // 0x1160(0x0010) (IsPlainOldData)
	bool                                               bInBaseReplication;                                       // 0x1170(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xF];                                       // 0x1171(0x000F) MISSED OFFSET
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                   // 0x1180(0x0040) (Transient)
	bool                                               bCanVehicleJump;                                          // 0x11C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x11C1(0x0001)
	unsigned char                                      bPressedJump : 1;                                         // 0x11C1(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWasJumping : 1;                                          // 0x11C1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData04[0x2];                                       // 0x11C2(0x0002) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                          // 0x11C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpForceTimeRemaining;                                   // 0x11C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ProxyJumpForceStartedTime;                                // 0x11CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x11D0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpMaxCount;                                             // 0x11D4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpCurrentCount;                                         // 0x11D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              BioVehicleLaunchCollDownTime;                             // 0x11DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                        // 0x11E0(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0xC];                                       // 0x11EC(0x000C) MISSED OFFSET
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                              // 0x11F8(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBioVehicleJumped;                                       // 0x1204(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                               // 0x1210(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x121C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                  // 0x121D(0x0001) (Transient)
	unsigned char                                      bClientUpdating : 1;                                      // 0x121D(0x0001) (Transient)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x121D(0x0001) (Transient)
	unsigned char                                      UnknownData06[0xA];                                       // 0x121E(0x000A) MISSED OFFSET
	bool                                               HasBeenTamed;                                             // 0x1228(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x13];                                      // 0x1229(0x0013) MISSED OFFSET
	bool                                               bCanbeDamagedByTrex;                                      // 0x123C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldGenerateStaticDeadBodyWhileDeath;                  // 0x123D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x123E(0x0002) MISSED OFFSET
	float                                              OverlapTestScale;                                         // 0x1240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x1244(0x0004) MISSED OFFSET
	struct FName                                       AnimCompTagName;                                          // 0x1248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBioVehicleBeenTamed;                                    // 0x1250(0x000C) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USkeletalMesh*                               UntamedMesh;                                              // 0x125C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USkeletalMesh*                               TamedMesh;                                                // 0x1260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<struct FName, struct FFootStepEffect>         FootStepEffects;                                          // 0x1264(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, class UParticleSystemComponent*> FootStepEffectRuntimeData;                                // 0x12A0(0x0050) (ExportObject, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnAnimInstanceActive;                                     // 0x12DC(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bShouldPlayRandomIdleWhilePassengersOn;                   // 0x12E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x12E9(0x0003) MISSED OFFSET
	float                                              RandomIdleResetTimeMin;                                   // 0x12EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomIdleResetTimeMax;                                   // 0x12F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RandomIdleIndexMin;                                       // 0x12F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RandomIdleIndexMax;                                       // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBioVehicleDoRandomIdle;                                 // 0x12FC(0x000C) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x8];                                       // 0x1308(0x0008) MISSED OFFSET
	bool                                               bEnableSimulatedOptimize;                                 // 0x1310(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x1311(0x0003) MISSED OFFSET
	TArray<struct FSimulateThresholds>                 BioVehicleSimulateThresholds;                             // 0x1314(0x000C) (ZeroConstructor, Config)
	bool                                               bEnableCollisionOptimization;                             // 0x1320(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x1321(0x0003) MISSED OFFSET
	float                                              OpenCollisionMinDistSq;                                   // 0x1324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShooterOpenCollisionMaxCosTheta;                          // 0x1328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FOpenCollisionLODAngle>              BioVehicleCollisionDistSqAngles;                          // 0x132C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              CheckCollisionOpenInternal;                               // 0x1338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x133C(0x0004) MISSED OFFSET
	struct FName                                       CreatureVehicleMesh_ProfileName;                          // 0x1340(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugCollisionLine;                                      // 0x1348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0xB];                                       // 0x1349(0x000B) MISSED OFFSET
	class ASTExtraBaseCharacter*                       CacheNearlyCharacer;                                      // 0x1354(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x8];                                       // 0x1358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleBase");
		return pStaticClass;
	}


	void StopJumping();
	void SetSimulatePhysics(bool bSimulate);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetHandBrake(float rate);
	void ServerResetToPosition(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnTakingDamage(class AActor* HitActor, class AActor* HitInstigator, const struct FHitResult& HitInfo, const struct FVector& ImpulseDir, float Damage);
	void OnRep_ReplicatedBasedMovement();
	void OnRep_HasBeenTamed();
	void OnRep_FuelExhausted(bool bPrevFuelExhausted);
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void OnExitingVehicleOnServer();
	void OnEnteringVehicleOnServer(bool IsSucc);
	void OnAnimListLoadFinished(class UBioVehicleAnimListComponent* AnimListComponent);
	void MoveUp(float rate);
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsJumpProvidingForce();
	void HandleOnRiderAnimInstanceActive(class UAnimInstance* ActivedAnimInstance);
	void HandleOnClientBeenTamed();
	float GetVehicleOriginToLand();
	bool GetVehicleBreakOutState();
	struct FVector GetRotationInputDir();
	struct FRotator GetPlayerLookAtRotation();
	float GetConsumeFuelRate();
	class UBoxComponent* GetBodyShapeComponent();
	class UBioVehicleMovementComponent* GetBioVehicleMovement();
	struct FVector GetBaseTranslationOffset();
	void ExitVehicle();
	void EnterVehicle(bool IsSucc);
	void ClientEnterVehicle(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType);
	bool CanJumpInternal();
	bool CanJump();
	bool CanConsumeFuel();
	bool CanCharacterEnterVehicle(class ASTExtraPlayerCharacter* InCharacter, ESTExtraVehicleSeatType SeatType);
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
	void BroadCastPlayingRandomIdleAnim(int RandomIdleAnim);
	bool BPCanCharacterEnterVehicle(class ASTExtraPlayerCharacter* InCharacter);
	void ActiveFootParticleEffect(const struct FName& EffectName, const struct FVector& ActivedLocation);
};


// Class Addons.BioVehicleDamageComponent
// 0x0020 (0x03E0 - 0x03C0)
class UBioVehicleDamageComponent : public UVehicleDamageComponent
{
public:
	float                                              VehicleDamageBioVehicleFactor;                            // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxHitByVehicleImpulseVelocity;                           // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinHitByVehicleImpulseVelocity;                           // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpulseSelfCD;                                            // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleDamageComponent");
		return pStaticClass;
	}

};


// Class Addons.BioVehicleMovementComponent
// 0x0878 (0x09A0 - 0x0128)
class UBioVehicleMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0128(0x0004) MISSED OFFSET
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x012C(0x0001) (Transient)
	unsigned char                                      bNeedSLerpRequestedVelocity : 1;                          // 0x012C(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x012C(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x012C(0x0001) (Transient)
	unsigned char                                      UnknownData01 : 2;                                        // 0x012C(0x0001)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x012C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                   // 0x012C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNeedSlowDownRequestedVelocity : 1;                       // 0x012D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x2];                                       // 0x012E(0x0002) MISSED OFFSET
	float                                              SlowDownRequestedVelocityFactor;                          // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0134(0x0010) MISSED OFFSET
	float                                              GravityScale;                                             // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0148(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x0149(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x26];                                      // 0x014A(0x0026) MISSED OFFSET
	float                                              MaxStepHeight;                                            // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x0178(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WalkableHeadHitZ;                                         // 0x017C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              StepForwardMinDelta;                                      // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GroundFriction;                                           // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanStandOnOthervehicle;                                  // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              MaxSwimSpeed;                                             // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlyBackSpeed;                                          // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAnalogWalkSpeed;                                       // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationWalking;                               // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimFriction;                                             // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAirControl;                                        // 0x01C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x01C9(0x0003) MISSED OFFSET
	class UCurveFloat*                                 CurveAirControl;                                          // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl;                                               // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimVelocityZLimitScale;                                  // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloatingUpZ;                                              // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x01F8(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              SmoothRotationLerpFactor;                                 // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RotateToCameraLerpSpeed;                                  // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    DeltaRotated;                                             // 0x020C(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNeedBackward : 1;                                        // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepWhileNavWalking : 1;                                // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoFloatingUp : 1;                                      // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSeriousInjuried : 1;                                     // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJumpAllowedWhenSeriousInjuried : 1;                      // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07 : 1;                                        // 0x0218(0x0001)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x0219(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x0219(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x0219(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x0219(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x0219(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x0219(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x0219(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x0219(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData08[0x2];                                       // 0x021A(0x0002) MISSED OFFSET
	float                                              HeadCollisionScaleOnDS;                                   // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWalkingBlockHeadSlide;                                   // 0x0220(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWalkingDoubleCheckWhenPenetrate;                         // 0x0221(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0222(0x0002) MISSED OFFSET
	float                                              WalkingHeadPenetrateCheckRadius;                          // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkingHeadPenetrateCheckHeight;                          // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFallingBlockHeadSlide;                                   // 0x022C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDoubleCheckSlide;                                        // 0x022D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x022E(0x0002) MISSED OFFSET
	float                                              HeadSlideCollisionScaleHeight;                            // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadSlideCollisionScaleRadius;                            // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadSlideFallingCollisionScale;                           // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHeadCheckSlope;                                          // 0x023C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowBodySlideSurface;                                    // 0x023D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEableHeadBlockVelocityLimit;                             // 0x023E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x023F(0x0001) MISSED OFFSET
	float                                              HeadBlockLimitVelocity;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEableHeadBlockLimitThrottle;                             // 0x0244(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLastHeadWalkingCheck;                                    // 0x0245(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x0246(0x0002) MISSED OFFSET
	float                                              bLastHeadRotationCheck;                                   // 0x0248(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bClientResolveServerPenetration;                          // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13 : 1;                                        // 0x024D(0x0001)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;               // 0x024D(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bForceNoSimulatePrediction : 1;                           // 0x024D(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x024D(0x0001)
	unsigned char                                      UnknownData14[0x2];                                       // 0x024E(0x0002) MISSED OFFSET
	class USceneComponent*                             DeferredUpdatedMoveComponent;                             // 0x0250(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnablePhysicsInteraction;                                // 0x0260(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bTouchForceScaledToMass;                                  // 0x0261(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPushForceScaledToMass;                                   // 0x0262(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPushForceUsingZOffset;                                   // 0x0263(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bScalePushForceToVelocity;                                // 0x0264(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0265(0x0003) MISSED OFFSET
	float                                              StandingDownwardForceScale;                               // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0288(0x0004) MISSED OFFSET
	struct FVector                                     Acceleration;                                             // 0x028C(0x000C) (Net, IsPlainOldData)
	struct FVector                                     PendingDirectionalBrakingAccelerationToApply;             // 0x0298(0x000C) (Net, IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x02A4(0x000C) (IsPlainOldData)
	struct FQuat                                       LastUpdateRotation;                                       // 0x02B0(0x0010) (IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                                       // 0x02C0(0x000C) (IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;                       // 0x02CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                                    // 0x02D0(0x000C) (IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x02DC(0x000C) (IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x02E8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x8];                                       // 0x02EC(0x0008) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                             // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;                      // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                                 // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                          // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x030C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;           // 0x0314(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;           // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkRadius;                                     // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkHalfHeight;                                 // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                           // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothScale;                                    // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                            // 0x032C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReplaySmoothUseInterp;                                   // 0x0330(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                     // 0x0331(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x2];                                       // 0x0332(0x0002) MISSED OFFSET
	float                                              LedgeCheckThreshold;                                      // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	struct FFindFloorResult                            CurrentFloor;                                             // 0x0340(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x03E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x03E2(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x03E3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x03E3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x03E3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x03E3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x03E3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                                      // 0x03E3(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x03E3(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x03E3(0x0001) (Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;        // 0x03E4(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotifyApex : 1;                                          // 0x03E4(0x0001) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bCheatFlying : 1;                                         // 0x03E4(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x03E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCustomAction0 : 1;                                       // 0x03E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x03E4(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x03E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x03E4(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x03E5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x03E5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x03E5(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x03E5(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x03E5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x03E5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData20[0x2];                                       // 0x03E6(0x0002) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x03EC(0x000C) (Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x040C(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData21[0xA8];                                      // 0x0418(0x00A8) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x04C4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWalkingFloorDistTolerance;                             // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavRotationFactor;                                        // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWantedSpeed;                                           // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceBraking : 1;                                        // 0x04E0(0x0001) (Deprecated)
	unsigned char                                      UnknownData22[0x3];                                       // 0x04E1(0x0003) MISSED OFFSET
	float                                              CrouchedSpeedMultiplier;                                  // 0x04E4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              UpperImpactNormalScale;                                   // 0x04E8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FBioVehicleMovementPostPhysicsTickFunction  PostPhysicsTickFunction;                                  // 0x04EC(0x003C)
	bool                                               bEnableSimulatedVelocity;                                 // 0x0528(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSpectatorSmoothVelocity;                                 // 0x0529(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x2];                                       // 0x052A(0x0002) MISSED OFFSET
	float                                              ClientServerVelocitySizeSquareThreshold;                  // 0x052C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDSSmoothVelocity;                                        // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAdjustClientWithRotation;                                // 0x0531(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x12];                                      // 0x0532(0x0012) MISSED OFFSET
	bool                                               EnabledResetPredictionData;                               // 0x0544(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0xB];                                       // 0x0545(0x000B) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x0550(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                        // 0x0554(0x0090) (Transient)
	unsigned char                                      UnknownData26[0x8C];                                      // 0x05E4(0x008C) MISSED OFFSET
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x0670(0x0040) (Transient)
	struct FVector                                     AnimRootMotionVelocity;                                   // 0x06B0(0x000C) (Transient, IsPlainOldData)
	bool                                               bWasSimulatingRootMotion;                                 // 0x06BC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;            // 0x06BD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData27[0x2];                                       // 0x06BE(0x0002) MISSED OFFSET
	class ABioVehicleBase*                             VehicleOwner;                                             // 0x06C0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x10];                                      // 0x06C4(0x0010) MISSED OFFSET
	bool                                               bIsAcceptInput;                                           // 0x06D4(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x06D5(0x0003) MISSED OFFSET
	float                                              NetThrottleInput;                                         // 0x06D8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              NetSteeringInput;                                         // 0x06DC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              NetRisingInput;                                           // 0x06E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0xC];                                       // 0x06E4(0x000C) MISSED OFFSET
	float                                              ForwardSpeed;                                             // 0x06F0(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              AngularSpeed;                                             // 0x06F4(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              HandBrakeRate;                                            // 0x06F8(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bOpenCustomBodyBox;                                       // 0x06FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOpenCustomHeadCapsule;                                   // 0x06FD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRotationCheckHeadCapsule;                                // 0x06FE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBlockRevertTransfrom;                                    // 0x06FF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloorCheckXReduce;                                        // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFollowBasedVehicle;                                      // 0x0704(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanWalkOnBioVehicle;                                     // 0x0705(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x2];                                       // 0x0706(0x0002) MISSED OFFSET
	class UCurveFloat*                                 AngularVelocityCurve;                                     // 0x0708(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AccResistanceCurve;                                       // 0x070C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 DecResistanceCurve;                                       // 0x0710(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BreakAccelerationCurve;                                   // 0x0714(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 SlopeSpeedFactorCurve;                                    // 0x0718(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAcceleration;                                      // 0x071C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxBackAcceleration;                                      // 0x0720(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngularAcceleration;                                      // 0x0724(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultAngularVelocity;                                   // 0x0728(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultResistanceCoefficient;                             // 0x072C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultStaticResistance;                                  // 0x0730(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBrakeAcceleration;                                 // 0x0734(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultSpeed;                                             // 0x0738(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxBackSpeed;                                             // 0x073C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeltaDotFactor;                                           // 0x0740(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlopeBlockDotFactorMax;                                   // 0x0744(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlopeBlockDotFactorMin;                                   // 0x0748(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingHeadResolveSpeed;                                  // 0x074C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData32[0x4];                                       // 0x0750(0x0004) MISSED OFFSET
	float                                              SeriousInjuredSpeedFactor;                                // 0x0754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x1];                                       // 0x0758(0x0001) MISSED OFFSET
	unsigned char                                      bDisableOBSmooth : 1;                                     // 0x0759(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData34[0x2];                                       // 0x075A(0x0002) MISSED OFFSET
	float                                              MinJumpSpeed;                                             // 0x075C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceClientNoCombineWhenRot;                             // 0x0760(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceClientNoCombineWhenJump;                            // 0x0761(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceClientNoCombineWhenHeadBlock;                       // 0x0762(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceClientNoCombineWhenStepup;                          // 0x0763(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadBlockNoCombineInterval;                               // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepUpNoCombineInterval;                                  // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData35[0x8];                                       // 0x076C(0x0008) MISSED OFFSET
	unsigned char                                      NoCombineDeviceLevel;                                     // 0x0774(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x3];                                       // 0x0775(0x0003) MISSED OFFSET
	float                                              NoCombineSecondsPerFrame;                                 // 0x0778(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutonomousMoveWeakNetScaleMSecsMin;                       // 0x077C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutonomousMoveWeakNetScaleMSecsMax;                       // 0x0780(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutonomousMoveWeakNetScaleRate;                           // 0x0784(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bServerMoveCheckPassWall;                                 // 0x0788(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTeleportIgnoreCheckPassWall;                             // 0x0789(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0x2];                                       // 0x078A(0x0002) MISSED OFFSET
	float                                              RadiusScaleWhenCheckPassWall;                             // 0x078C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeightScaleWhenCheckPassWall;                             // 0x0790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnablePenetrationResolve;                                // 0x0794(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData38[0x3];                                       // 0x0795(0x0003) MISSED OFFSET
	int                                                PenetrationUnResolveCount;                                // 0x0798(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PenetrationUnResolveDistanceSq;                           // 0x079C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PenetrationResolveValidDistanceSq;                        // 0x07A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PenetrationResolveValidDistanceMax;                       // 0x07A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData39[0x10];                                      // 0x07A8(0x0010) MISSED OFFSET
	struct FResolvePenetrationMoveData                 ResolvePenetrationMove;                                   // 0x07B8(0x0088) (Transient)
	struct FResolvePenetrationParams                   ResolvePenetrationParams;                                 // 0x0840(0x0050) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData40[0x60];                                      // 0x0890(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBioVehicleResolvePenetrationDelegate;                   // 0x08F0(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData41[0xC];                                       // 0x08FC(0x000C) MISSED OFFSET
	float                                              DefaultJumpHeight;                                        // 0x0908(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 JumpingHeightCurve;                                       // 0x090C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 JumpingHeightByObsHeightCurve;                            // 0x0910(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bIsControlJumpHeight : 1;                                 // 0x0914(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bApplyGravityWhileJumping : 1;                            // 0x0914(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData42[0x3];                                       // 0x0915(0x0003) MISSED OFFSET
	float                                              JumpHorizontalVelocityScale;                              // 0x0918(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandByJumpSpeed;                                         // 0x091C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandByJumpSpeedZ;                                        // 0x0920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x0928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffVelocityScale;                                     // 0x092C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSimulateZeroVelocityDeferFindFloor;                      // 0x0930(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData43[0x3];                                       // 0x0931(0x0003) MISSED OFFSET
	float                                              SimulateFindFloorInternal;                                // 0x0934(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SimulateOptimizeCountsNum;                                // 0x0938(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0x4];                                       // 0x093C(0x0004) MISSED OFFSET
	bool                                               bUseSelfLocDiffThreshold;                                 // 0x0940(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData45[0x3];                                       // 0x0941(0x0003) MISSED OFFSET
	float                                              MaxAllowedLocDiffSquare;                                  // 0x0944(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceApplyServerMovementMode;                            // 0x0948(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bServerCheckJumpZLocDiff;                                 // 0x0949(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData46[0x2];                                       // 0x094A(0x0002) MISSED OFFSET
	float                                              JumpProtectionZThreshold;                                 // 0x094C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSimulateProtection;                                      // 0x0950(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData47[0x3];                                       // 0x0951(0x0003) MISSED OFFSET
	float                                              SimulateProtectionInterval;                               // 0x0954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x14];                                      // 0x0958(0x0014) MISSED OFFSET
	bool                                               bSimulateMovement;                                        // 0x096C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableServerAntiCheat;                                   // 0x096D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData49[0x2];                                       // 0x096E(0x0002) MISSED OFFSET
	float                                              SecurityAllowedMoveSpeedRatio;                            // 0x0970(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSecuritySpeedPingAdaption;                               // 0x0974(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData50[0x3];                                       // 0x0975(0x0003) MISSED OFFSET
	float                                              SecuritySpeedPingAdaptionRate;                            // 0x0978(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SecurityCheckThres;                                       // 0x097C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData51[0x20];                                      // 0x0980(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleMovementComponent");
		return pStaticClass;
	}


	void UnpackAccelerationToInput(const struct FVector& InAccel);
	bool ShouldRecordPosition();
	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetThrottleInput(float rate);
	void SetSteeringInput(float rate);
	void SetRisingInput(float rate);
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void SetAcceptInput(bool bIsAccept);
	void ServerSetThrottleInput(float rate);
	void ServerSetSteeringInput(float rate);
	void ServerSetRisingInput(float rate);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	struct FVector PackInputToAcceleration();
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	bool IsSwimming();
	bool IsSeriousInjuriedAllowJumping();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnExitVehicleAnim(class ASTExtraPlayerCharacter* Character, int SeatInx);
	float GetWalkingDecResistance(float Speed);
	float GetWalkingAccResistance(float Speed);
	float GetValidPerchRadius();
	float GetThrottleInput();
	float GetSteeringInput();
	float GetSlopeSpeedFactor(float Slope);
	float GetRisingInput();
	struct FVector GetPredictVelocity(float PredictTime);
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeightWithJumpTime();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	float GetJumpVelocityZ();
	float GetJumpingHeightBySpeed(float Speed);
	float GetJumpingHeightByObsHeight(float ObsHeight);
	struct FVector GetImpartedMovementBaseVelocity();
	float GetDesireAcceleration();
	float GetCurrentSecuritySpeedRatio();
	float GetCurrentMaxAllowedSpeed();
	struct FVector GetCurrentAcceleration();
	float GetBreakAcceleration(float Speed);
	float GetAngularVelocityByCurve(float Speed, bool AsForce);
	float GetAnalogInputModifier();
	void DisableMovement();
	void DealWithCustomAction(float DeltaTime);
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPositionAndRotation(float TimeStamp, const struct FVector& NewLoc, const struct FRotator& NewRot, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void ClearAccumulatedForces();
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void CalculateVelocityWithResistance(float DeltaTime, bool bFluid);
	float CalculateCurrentForwardSpeed();
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& force);
	void AddDirectionalBrakingAcceleration(const struct FVector& BrakingAcceleration);
};


// Class Addons.BioVehicleRiderAnimInstanceBase
// 0x00E0 (0x0420 - 0x0340)
class UBioVehicleRiderAnimInstanceBase : public UCharacterAnimStateBase
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0340(0x0038) MISSED OFFSET
	bool                                               bAnimVarHasCached;                                        // 0x0378(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	class UAnimMontage*                                MountAnimMontage;                                         // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     TransPropertyPrefix;                                      // 0x0380(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               bIsDead;                                                  // 0x038C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableTerrainAdaption;                                   // 0x038D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x038E(0x0002) MISSED OFFSET
	int                                                AnimLOD;                                                  // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x78];                                      // 0x0394(0x0078) MISSED OFFSET
	struct FString                                     LuaFilePath;                                              // 0x040C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleRiderAnimInstanceBase");
		return pStaticClass;
	}


	void LuaInitializeAnimation();
	void LuaCacheAnimVarWithAnimList(class UBioVehicleAnimListComponent* RiderAnimListComponent);
	void DoTransition(const struct FString& State);
	void ConfirmTransition(const struct FString& State);
	void CacheAnimVarWithAnimList(class UBioVehicleAnimListComponent* RiderAnimListComponent);
};


// Class Addons.BioVehicleSkeletalMeshComponent
// 0x0000 (0x0BE0 - 0x0BE0)
class UBioVehicleSkeletalMeshComponent : public UUAESkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.BioVehicleSkeletalMeshComponent");
		return pStaticClass;
	}

};


// Class Addons.DinosaurMonsterAnimInstanceBase
// 0x0000 (0x04B0 - 0x04B0)
class UDinosaurMonsterAnimInstanceBase : public USTExtraMonsterAnimInstance
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.DinosaurMonsterAnimInstanceBase");
		return pStaticClass;
	}

};


// Class Addons.DistanceMatchingComponent
// 0x0030 (0x00F0 - 0x00C0)
class UDistanceMatchingComponent : public UActorComponent
{
public:
	float                                              SpeedThreshold;                                           // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepUpOffset;                                            // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepDownOffset;                                          // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PredictedLocation;                                        // 0x00CC(0x000C) (Edit, BlueprintVisible, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDistanceMatchSuccess;                                   // 0x00D8(0x000C) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bShouldOnlyDistanceMatchingOnAutonomousProxy;             // 0x00E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	class UBioVehicleMovementComponent*                BioVehicleMovement;                                       // 0x00E8(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x00EC(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.DistanceMatchingComponent");
		return pStaticClass;
	}


	void ServerOnDistanceMatchSuccess(const struct FVector& PredictedStopLocation);
	bool PredictStopLocation(struct FVector* OutLocation);
	void OnEndAccelerating();
	class UAnimInstance* GetBioVehicleAnimInstance();
	void BroadCastOnDistanceMatchSuccess(const struct FVector& PredictedStopLocation);
};


// Class Addons.DistanceMatchingInterface
// 0x0000 (0x0020 - 0x0020)
class UDistanceMatchingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.DistanceMatchingInterface");
		return pStaticClass;
	}


	void OnDistanceMatchingSuccess(const struct FVector& PredictedStopLocation);
};


// Class Addons.FloatingCapsuleVehicle
// 0x0080 (0x1430 - 0x13B0)
class AFloatingCapsuleVehicle : public ASTExtraAmphibiousVehicle
{
public:
	float                                              MaxLiftHeight;                                            // 0x13B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinLiftHeight;                                            // 0x13B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LiftSpeedFactor;                                          // 0x13B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoWakeUpDistance;                                       // 0x13BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableMoveWheelVelocticyCheck;                            // 0x13C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x13C1(0x0003) MISSED OFFSET
	float                                              MoveWheelVelocticyCheckThreshold;                         // 0x13C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BreakOutMode;                                             // 0x13C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x13C9(0x0003) MISSED OFFSET
	float                                              BreakOutCD;                                               // 0x13CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BreakOutInterval;                                         // 0x13D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 BreakOutImpulseCurve;                                     // 0x13D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBreakOutVelocity;                                  // 0x13D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBreakOutImpulse;                                   // 0x13DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyCameraEffect;                                       // 0x13E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               KeepThrottleInput;                                        // 0x13E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x13E2(0x0002) MISSED OFFSET
	float                                              BreakOutCameraFOVEffect;                                  // 0x13E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_BreakOutStart;                                        // 0x13E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_BreakOutEnd;                                          // 0x13EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnVehicleBreakOutStateChanged;                            // 0x13F0(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVehicleWaterStateChanged;                               // 0x13FC(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UFloatingVehicleVehicleMovementComponent2*   VehicleFloatingMovement;                                  // 0x1408(0x0004) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bInBreakOutState;                                         // 0x140C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x13];                                      // 0x140D(0x0013) MISSED OFFSET
	bool                                               TargetFloatState;                                         // 0x1420(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x1421(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.FloatingCapsuleVehicle");
		return pStaticClass;
	}


	void VehicleBreakOutVelocity(const struct FVector& ApplyVelocity, bool bAddVelocity);
	void SetTargetFloatState(bool bUpState);
	void SetServerPrecentPenetratingEnabled(bool Enabled);
	void SetEnterDistanceSq(float InEnterDistance, bool IsSq);
	void ServerBreakOut(bool bEnable);
	void OnRep_BreakOutState(bool bPrevState);
	void MoveWheelHeight(float DeltaSeconds);
	class USTExtraFloatingVehicleMovementComponentBase* GetFloatingVehicleMovement();
	float GetEnterDistanceSq();
	void DoBreakOut(bool bEnable);
	void BreakOut(bool bEnable);
	void BPTryCheckSimulatePhysics();
};


// Class Addons.FloatingVehicleVehicleMovementComponent2
// 0x0028 (0x0190 - 0x0168)
class UFloatingVehicleVehicleMovementComponent2 : public USTExtraFloatingVehicleMovementComponentBase
{
public:
	class UCurveFloat*                                 Curve_BackwardAcceleration;                               // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Radius;                                             // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SteeringTorqueScale;                                      // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StaticStatusSpeedThreshold;                               // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bClientSideCameraUpdates;                                 // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSteeringTorqueMode;                                      // 0x0179(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x16];                                      // 0x017A(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.FloatingVehicleVehicleMovementComponent2");
		return pStaticClass;
	}


	bool UpdateEnabled();
	void EnableUpdate(bool InEnable);
};


// Class Addons.HoveringVehicle
// 0x0020 (0x10A0 - 0x1080)
class AHoveringVehicle : public ASTExtraVehicleBase
{
public:
	float                                              ModifyMassInKG;                                           // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHoveringActive;                                          // 0x1084(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1085(0x0003) MISSED OFFSET
	TArray<class USceneComponent*>                     HoveringSpots;                                            // 0x1088(0x000C) (ExportObject, ZeroConstructor)
	unsigned char                                      bHoveringInitialized : 1;                                 // 0x1094(0x0001)
	EHoverSimulateState                                HoverSimulateState;                                       // 0x1095(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x1096(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.HoveringVehicle");
		return pStaticClass;
	}


	void OnMeshPhysicsCreated();
	void InitHoveringSpots();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void DeactivateHoveringSimulate();
	void ActivateHoveringSimulate();
};


// Class Addons.HoveringVehicleMovementComponent
// 0x0068 (0x0190 - 0x0128)
class UHoveringVehicleMovementComponent : public UPawnMovementComponent
{
public:
	float                                              HoverDistanceWhenNoDriver;                                // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngularForce;                                          // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TraceGroundLength;                                        // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringCoefficient;                                        // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DampingCoefficient;                                       // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartAccelerationRate;                                    // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimpleHoverForceRate;                                     // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StaticHoveringSectionFactor;                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoCorrectWhenTurnOver : 1;                             // 0x014C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	float                                              TurnOverLastDurationBeforeFix;                            // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DragDownRateWhenInAir;                                    // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FHoveringSimulateData>               HoveringSimulateData;                                     // 0x0158(0x000C) (ZeroConstructor)
	float                                              STThrottleInput;                                          // 0x0164(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              STSteeringInput;                                          // 0x0168(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInAir;                                                   // 0x016C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	float                                              Acceleration;                                             // 0x0170(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bTurnOver;                                                // 0x0174(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1B];                                      // 0x0175(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.HoveringVehicleMovementComponent");
		return pStaticClass;
	}


	void UpdateHoverSimulation(float DeltaTime);
	void SetThrottleInput(float rate);
	void SetSteeringInput(float rate);
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);
	void Reset();
};


// Class Addons.LandingCreatureAnimInstance
// 0x00B0 (0x0590 - 0x04E0)
class ULandingCreatureAnimInstance : public UBioVehicleAnimInstanceBase
{
public:
	float                                              SpeedLerpSpeed;                                           // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlockedSpeed;                                             // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunStopSpeedThreshold;                                    // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LegIKAlphaLerpSpeed;                                      // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABioVehicleBase*                             OwnerDinosaur;                                            // 0x04F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLandingCreatureJump;                                    // 0x04F4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              ThrottleInput;                                            // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SteeringInput;                                            // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasAcceleration;                                         // 0x0508(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsJumping;                                               // 0x0509(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsRunStopping;                                           // 0x050A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsStopping;                                              // 0x050B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsInAir;                                                 // 0x050C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldUseExtraDeadAnim;                                  // 0x050D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x050E(0x0002) MISSED OFFSET
	int                                                RandomIdleIndex;                                          // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDoRandomIdle;                                            // 0x0514(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0515(0x0003) MISSED OFFSET
	float                                              Speed;                                                    // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Direction;                                                // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LegIKAlpha;                                               // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimPoseRecorder*                           AnimPoseRecorder;                                         // 0x0524(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDistanceMatching;                                  // 0x0528(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0529(0x0003) MISSED OFFSET
	struct FVector                                     PredictedStopPoint;                                       // 0x052C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              DistanceFromStopPoint;                                    // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimSequence*                               ExtraDeathAnim;                                           // 0x053C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               UntamedIdleAnim;                                          // 0x0540(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               IdleAnim;                                                 // 0x0544(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim1;                                          // 0x0548(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim2;                                          // 0x054C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 MovementAnim;                                             // 0x0550(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               JumpStartAnim;                                            // 0x0554(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               FallingAnim;                                              // 0x0558(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               IdleLandingAnim;                                          // 0x055C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RunLandingAnim;                                           // 0x0560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurnStartAnim;                                            // 0x0564(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurningAnim;                                              // 0x0568(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurnEndAnim;                                              // 0x056C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0570(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.LandingCreatureAnimInstance");
		return pStaticClass;
	}


	void SetJump();
	void ResetStop();
	void ResetJump();
	void ResetDoRandomIdle();
	void DoRandomIdle(int Index);
};


// Class Addons.MonsterRaptorAnimInstance
// 0x0030 (0x04E0 - 0x04B0)
class UMonsterRaptorAnimInstance : public UDinosaurMonsterAnimInstanceBase
{
public:
	bool                                               bResetIdleState;                                          // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	int                                                PlayedIdleIndex;                                          // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<int>                                        NotBattleIdleIndex;                                       // 0x04B8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        BattleIdleIndex;                                          // 0x04C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int                                                DefaultBattleIdleIndex;                                   // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DefaultNotBattleIdleIndex;                                // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasLockedTarget;                                         // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInBattle;                                                // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x04DA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.MonsterRaptorAnimInstance");
		return pStaticClass;
	}


	void OnResetPlayedIdleIndex(int NewIndex);
};


// Class Addons.OBHttpComponent
// 0x0048 (0x0198 - 0x0150)
class UOBHttpComponent : public ULuaActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	TArray<struct FPlayerAfterMatchAPI>                AfterMatchAPIList;                                        // 0x0158(0x000C) (Net, ZeroConstructor)
	bool                                               bSwitchOBHttpComponent;                                   // 0x0164(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0165(0x0003) MISSED OFFSET
	struct FString                                     IPAddr;                                                   // 0x0168(0x000C) (ZeroConstructor, Config)
	int                                                Port;                                                     // 0x0174(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FString                                     URLSetting;                                               // 0x0178(0x000C) (ZeroConstructor)
	int                                                MaxFailedTimes;                                           // 0x0184(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<int>                                        NeedItems;                                                // 0x0188(0x000C) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0194(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.OBHttpComponent");
		return pStaticClass;
	}


	void ServerGetBackPackInfo(int TeamID, TArray<int> ObserveReplicateItems);
	void ServerGetAllPlayerThrowInfo();
	void ServerCollectTeammateItemList(int TeamID);
	void PostTeamWeaponInfo(const struct FString& TeamWeaponInfoJsonStr);
	void PostTeamBackPackInfoByTeamID(int TeamID, TArray<int> ObserveReplicateItems);
	void PostTDMResultInfo(const struct FString& TDMResultInfoJsonStr);
	void OnRep_RealTimeAPIList();
	void OnRep_AfterMatchAPIList();
	void ClientUpdateTeammateItemList();
	void ClientGetBackPackInfo(TArray<struct FPlayerBackPackInfo> TeamBackPackInfo);
	void ClientGetAllPlayerThrowInfo(TArray<struct FPlayerThrowInfo> AllPlayerThrowInfo);
	void ClientGetAirDropBoxInfo(unsigned char AirDropId, TArray<struct FAirDropBoxDataItem> AirDropBoxDataList);
};


// Class Addons.ObserverProbeComponent
// 0x00D0 (0x0190 - 0x00C0)
class UObserverProbeComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x54];                                      // 0x00C0(0x0054) MISSED OFFSET
	TArray<class ABaseAIController*>                   MLAIControllerList;                                       // 0x0114(0x000C) (ZeroConstructor)
	TArray<class ASTExtraPlayerController*>            APIControllerList;                                        // 0x0120(0x000C) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x54];                                      // 0x012C(0x0054) MISSED OFFSET
	class AUAEGameMode*                                OwnerGameMode;                                            // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData)
	class ASTExtraGameStateBase*                       CachedGameState;                                          // 0x0184(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0188(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.ObserverProbeComponent");
		return pStaticClass;
	}

};


// Class Addons.OBSubSystem
// 0x0000 (0x0020 - 0x0020)
class UOBSubSystem : public UWorldSubsystem
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.OBSubSystem");
		return pStaticClass;
	}

};


// Class Addons.PterosaurAnimInstance
// 0x00D0 (0x05B0 - 0x04E0)
class UPterosaurAnimInstance : public UBioVehicleAnimInstanceBase
{
public:
	float                                              MinStartLeanRollSpeed;                                    // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinStartLeanPitchSpeed;                                   // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartFlyingSpeedThreshold;                                // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDirection;                                             // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwoopDirectionThreshold;                                  // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DirectionLerpSpeed;                                       // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxLeanAnglePitch;                                        // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxLeanAngleRoll;                                         // 0x04FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanAngleRollLerpSpeed;                                   // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanAnglePitchLerpSpeed;                                  // 0x0504(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAssetPlayerSyncNode*                        BlendSpaceSyncNode;                                       // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EPterosaurMoveMode>                    MoveState;                                                // 0x050C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EPterosaurSwoopStage                               SwoopStage;                                               // 0x050D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x050E(0x0002) MISSED OFFSET
	int                                                LandingIndex;                                             // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasCatchedPassenger;                                     // 0x0514(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsLanding;                                               // 0x0515(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsGroundDead;                                            // 0x0516(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsSwoopingDown;                                          // 0x0517(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsInAir;                                                 // 0x0518(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFalling;                                               // 0x0519(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsTryingToLand;                                          // 0x051A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartFlying;                                             // 0x051B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotalSpeed;                                               // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalSpeed;                                          // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VerticalSpeed;                                            // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SteeringInput;                                            // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RisingInput;                                              // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Direction;                                                // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadYawDelta;                                             // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadPitchDelta;                                           // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadYawInterpolateSpeed;                                  // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadPitchInterpolateSpeed;                                // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyLeanAngleRoll;                                        // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyLeanAnglePitch;                                       // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpace*                                 ArrestMovementAnim;                                       // 0x0550(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               UntamedIdleAnim;                                          // 0x0554(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               GroundIdleAnim;                                           // 0x0558(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim1;                                          // 0x055C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim2;                                          // 0x0560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 MovementAnim;                                             // 0x0564(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 FlyingAO_Anim;                                            // 0x0568(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartFlyingAnim;                                          // 0x056C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartLandingAnim1;                                        // 0x0570(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartLandingAnim2;                                        // 0x0574(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim1;                                             // 0x0578(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim2;                                             // 0x057C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim3;                                             // 0x0580(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               TakingOffAnim;                                            // 0x0584(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RiseUpAnim;                                               // 0x0588(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RiseDownAnim;                                             // 0x058C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingStartAnim;                                          // 0x0590(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingAnim;                                               // 0x0594(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingEndAnim;                                            // 0x0598(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               GroundDeathAnim;                                          // 0x059C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DeathFallingAnim;                                         // 0x05A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DeathFallingGround;                                       // 0x05A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.PterosaurAnimInstance");
		return pStaticClass;
	}


	void ResetStartFlying();
	void OnStartFlying();
};


// Class Addons.PterosaurCatchedPassengerAnimInstance
// 0x0010 (0x0430 - 0x0420)
class UPterosaurCatchedPassengerAnimInstance : public UBioVehicleRiderAnimInstanceBase
{
public:
	float                                              HorizontalSpeed;                                          // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VerticalSpeed;                                            // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Direction;                                                // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpace*                                 MovementAnim;                                             // 0x042C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.PterosaurCatchedPassengerAnimInstance");
		return pStaticClass;
	}

};


// Class Addons.PterosaurDriverAnimInstance
// 0x0070 (0x0490 - 0x0420)
class UPterosaurDriverAnimInstance : public UBioVehicleRiderAnimInstanceBase
{
public:
	bool                                               bIsInAir;                                                 // 0x0420(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartFlying;                                             // 0x0421(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsTryingToLand;                                          // 0x0422(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasCatchedPassenger;                                     // 0x0423(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotalSpeed;                                               // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalSpeed;                                          // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VerticalSpeed;                                            // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SteeringInput;                                            // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RisingInput;                                              // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Direction;                                                // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyLeanAngleRoll;                                        // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyLeanAnglePitch;                                       // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EPterosaurMoveMode>                    MoveState;                                                // 0x0448(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	class UAnimSequence*                               GroundIdleAnim;                                           // 0x044C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 MovementAnim;                                             // 0x0450(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 CatchPassengerMovementAnim;                               // 0x0454(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartFlyingAnim;                                          // 0x0458(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartLandingAnim1;                                        // 0x045C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               StartLandingAnim2;                                        // 0x0460(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim1;                                             // 0x0464(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim2;                                             // 0x0468(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LandingAnim3;                                             // 0x046C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               TakingOffAnim;                                            // 0x0470(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RiseUpAnim;                                               // 0x0474(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RiseDownAnim;                                             // 0x0478(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingStartAnim;                                          // 0x047C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingAnim;                                               // 0x0480(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               DivingEndAnim;                                            // 0x0484(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UPterosaurAnimInstance>       OwnedPterosuarAnimInstance;                               // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.PterosaurDriverAnimInstance");
		return pStaticClass;
	}

};


// Class Addons.PterosaurMovementComponent
// 0x0200 (0x0BA0 - 0x09A0)
class UPterosaurMovementComponent : public UBioVehicleMovementComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x09A0(0x000C) MISSED OFFSET
	float                                              MaxFlyAcceleration;                                       // 0x09AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlySteeringRotationSpeed;                                 // 0x09B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x09B4(0x0010) MISSED OFFSET
	float                                              MaxUpSpeed;                                               // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDownSpeed;                                             // 0x09C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPterosaurSwoopDownStageChanged;                         // 0x09CC(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FPterosaurUpdateDistanceToLandConfig> UpdateGroundDistanceConfigs;                              // 0x09D8(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bIgnoreHeightLimit;                                       // 0x09E4(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x09E5(0x0003) MISSED OFFSET
	float                                              MaxFlyingZ;                                               // 0x09E8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckLandingGround;                                      // 0x09EC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x09ED(0x0003) MISSED OFFSET
	float                                              DistanceToLand;                                           // 0x09F0(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              LastCheckGroundInterval;                                  // 0x09F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x09F8(0x000C) MISSED OFFSET
	bool                                               bTopBlocked;                                              // 0x0A04(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0A05(0x0003) MISSED OFFSET
	float                                              MaxTraceDownHeight;                                       // 0x0A08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlyingHeight;                                          // 0x0A0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFlyingHeight;                                          // 0x0A10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlyingHeightThres;                                        // 0x0A14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SwoopClimbOffset;                                         // 0x0A18(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      bSwoopUsePathRotation : 1;                                // 0x0A24(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0A25(0x0003) MISSED OFFSET
	float                                              SyncRotationSpeed;                                        // 0x0A28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SyncRotationMoveSpeed;                                    // 0x0A2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SyncRotationAcceptableAngle;                              // 0x0A30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SplineActorClass;                                         // 0x0A34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwoopDownSpeed;                                        // 0x0A38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SplineCurveTangentLength;                                 // 0x0A3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreCatchEnterDistance;                                    // 0x0A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      ModifyEnterSplinePointDistanceArr;                        // 0x0A44(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	class UCurveFloat*                                 SwoopSpeedCurve;                                          // 0x0A50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   SwoopSpeedSafeRange;                                      // 0x0A54(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	TMap<struct FVector2D, struct FVector2D>           DirectionCorrectMoveSpeedMap;                             // 0x0A5C(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DistThresholdWhenInputAllowed;                            // 0x0A98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwoopMoveDuration;                                     // 0x0A9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwoopMoveBlockedDurationThreshold;                        // 0x0AA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSwitchUsePassedSplineDistance;                           // 0x0AA4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x17];                                      // 0x0AA5(0x0017) MISSED OFFSET
	struct FVector                                     DiveStartDirection;                                       // 0x0ABC(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     DiveDirection;                                            // 0x0AC8(0x000C) (BlueprintVisible, IsPlainOldData)
	float                                              MaxDiveSpeed;                                             // 0x0AD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDiveTime;                                              // 0x0AD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DiveTurnTime;                                             // 0x0ADC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DivingCoolDown;                                           // 0x0AE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDivingResetCamera;                                       // 0x0AE4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x33];                                      // 0x0AE5(0x0033) MISSED OFFSET
	class UCurveVector*                                SpeedCurve;                                               // 0x0B18(0x0004) (ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                PositionCurve;                                            // 0x0B1C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x30];                                      // 0x0B20(0x0030) MISSED OFFSET
	class UCurveVector*                                LandingCurve;                                             // 0x0B50(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxTakeOffTime;                                           // 0x0B54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                TakeOffCurve;                                             // 0x0B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DivingCurve;                                              // 0x0B5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SwoopingDownVelocity;                                     // 0x0B60(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bSwoopTurnLeft;                                           // 0x0B6C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0B6D(0x0003) MISSED OFFSET
	int                                                LandingConfigIndex;                                       // 0x0B70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FPterosaurLandingConfig>             LandingConfigs;                                           // 0x0B74(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                      CacheSplineActor;                                         // 0x0B80(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0B84(0x0008) MISSED OFFSET
	float                                              MaxAutoLandingTime;                                       // 0x0B8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bNoDriverForceNoSimulate;                                 // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bNoDriverForceLanding;                                    // 0x0B94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bCheckClientFlyingHeight;                                 // 0x0B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0B9C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.PterosaurMovementComponent");
		return pStaticClass;
	}


	void UpdateVerticalHeight(float DeltaTime);
	void StartTakingOff();
	void StartSwoopDown(const struct FVector& TargetLocation);
	void StartLanding();
	void StartFlyingDive();
	void SetServerDiveDirection(const struct FVector& Direction);
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetAutoLanding(float Value);
	bool IsTakingOff();
	bool IsSwoopDown();
	bool IsSwoopCatching();
	bool IsStrugglingToLand();
	bool IsLocalSwoopingDown();
	bool IsLandingWalking();
	bool IsLanding();
	bool IsDiving();
	bool IsCurveMoving();
	TEnumAsByte<EPterosaurMoveMode> GetMoveState();
	float GetDistanceToLand();
	void ExitSwoopDown();
	void ExitLanding();
	void EndTakingOff();
	void EndSwoopDown(bool bRestVelocity);
	void EndLanding();
	void EndFlyingDive();
	void DealWithCustomAction(float DeltaTime);
	bool CheckCanStartFlyingDive();
	void CalculateFlyingVelocity(float DeltaTime);
	void CalculateFlyingAcceleration(float DeltaTime);
	void CalculateDivingVelocity(float DeltaTime);
};


// Class Addons.PterosaurVehicle
// 0x00A0 (0x1400 - 0x1360)
class APterosaurVehicle : public ABioVehicleBase
{
public:
	float                                              ForceOpenParachuteHeightInPterosaur;                      // 0x1360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeightInPterosaur;                          // 0x1364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SkipOpenParachuteHeightInPterosuar;                       // 0x1368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxExecSwoopCatchDistance;                                // 0x136C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinExecSwoopCatchDistance2D;                              // 0x1370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCatchableDistance;                                     // 0x1374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwoopCatchCoolDown;                                       // 0x1378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldIgnoreHitPlayerWhenSwoopDown;                      // 0x137C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SyncSwoopCatchState;                                      // 0x137D(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x137E(0x0002) MISSED OFFSET
	class ASTExtraBaseCharacter*                       ArrestCharacter;                                          // 0x1380(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     TargetCatchLocation;                                      // 0x1384(0x000C) (IsPlainOldData)
	class UPterosaurMovementComponent*                 PterosaurMoveComponent;                                   // 0x1390(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DiveReadyTime;                                            // 0x1394(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPterosaurVehicleDive;                                   // 0x1398(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPterosaurVehicleDiveEnd;                                // 0x13A4(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPterosaurVehicleGroundDead;                             // 0x13B0(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPterosaurVehicleTopBlocked;                             // 0x13BC(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x13C8(0x0008) MISSED OFFSET
	bool                                               bIsGroundDead;                                            // 0x13D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x13D1(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPterosaurVehicleDead;                                   // 0x13D4(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAnimMontage*                                CatchPassengerAnim;                                       // 0x13E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                PrepareCatchPassengerAnim;                                // 0x13E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDynamicOptimizeActorComponents*             DynamicOptimizeComponent;                                 // 0x13E8(0x0004) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x13EC(0x0004) MISSED OFFSET
	float                                              FlyingHoverConsumeFuelRate;                               // 0x13F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x13F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.PterosaurVehicle");
		return pStaticClass;
	}


	void TryFlyingDive(bool bTry);
	void TryCancelSwoopDown();
	void ServerSwoopDown(const struct FVector& TargetLocation, bool IsForceEnd);
	void ServerReleaseCharacter(class ASTExtraBaseCharacter* Requester);
	void OnRep_SyncSwoopCatchState();
	void OnPterosaurSwoopStateChanged(EPterosaurSwoopStage NewStage, const struct FVector& TargetLocation);
	void OnPterosaurPrepareCatch();
	void OnClientExitFromPterosaur(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType);
	void MultiCast_SwoopDown(const struct FVector& TargetLocation);
	void MultiCast_SplineCorrect(const struct FVector& SyncLocation, const struct FVector& TargetLocation, TArray<struct FVector> SplinePoints);
	bool IsSwoopDown();
	bool IsSwoopCoolDown();
	bool IsSwoopCatching();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	class UPterosaurMovementComponent* GetPterosaurMovementComponent();
	float GetConsumeFuelRate();
	bool ForceCatchCharacter(class ASTExtraBaseCharacter* Character);
	bool DoSwoopDown(const struct FVector& TargetLocation);
	bool CanConsumeFuel();
	void BroadCastOnPterosaurPrepareCatch();
	void BPOnPterosaurSwoopStateChanged(unsigned char NewStage);
};


// Class Addons.RaptorAnimInstance
// 0x00B0 (0x0640 - 0x0590)
class URaptorAnimInstance : public ULandingCreatureAnimInstance
{
public:
	float                                              PitchInterpolateSpeed;                                    // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              YawInterpolateSpeed;                                      // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TiltTraceDeltaTime;                                       // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HeadTiltBoneNum;                                          // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 HeadTiltCurve;                                            // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadBlockHeightOffset;                                    // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadBlockForwardStartOffset;                              // 0x05A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadBlockForwardEndOffset;                                // 0x05AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadBlockTraceRadius;                                     // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadTiltRotateSpeed;                                      // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadTiltMaxAngle;                                         // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TailTiltBoneNum;                                          // 0x05BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                PitchYawDegreeThreshold;                                  // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UCurveFloat*>                         TailTiltCurves;                                           // 0x05C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              TailBlockHeightOffset;                                    // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailBlockForwardStartOffset;                              // 0x05D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailBlockForwardEndOffset;                                // 0x05D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailBlockTraceRadius;                                     // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailTiltRotateSpeed;                                      // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailTiltMaxAngle;                                         // 0x05E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAssetPlayerSyncNode*                        AssetPlayerSyncNode;                                      // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bEnableHeadTilt;                                          // 0x05EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableTailTilt;                                          // 0x05ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHeadBlocked;                                             // 0x05EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTailBlocked;                                             // 0x05EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadYawDelta;                                             // 0x05F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadYawDeltaPerBone;                                      // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<float>                                      TailYawDeltaPerBone;                                      // 0x05F8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<float>                                      TailPitchDeltaPerBone;                                    // 0x0604(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	float                                              ObstacleDegree;                                           // 0x0610(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0614(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.RaptorAnimInstance");
		return pStaticClass;
	}

};


// Class Addons.RaptorDriverAnimInstance
// 0x00A0 (0x04C0 - 0x0420)
class URaptorDriverAnimInstance : public UBioVehicleRiderAnimInstanceBase
{
public:
	struct FName                                       RightHandSaddleSocketName;                                // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              SteeringInput;                                            // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bEnableNewStateMachine;                                   // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasAcceleration;                                         // 0x0431(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsJumping;                                               // 0x0432(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsStopping;                                              // 0x0433(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsRunStopping;                                           // 0x0434(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDoRandomIdle;                                            // 0x0435(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0436(0x0002) MISSED OFFSET
	int                                                RandomIdleIndex;                                          // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsInAir;                                                 // 0x043C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	class UAssetPlayerSyncNode*                        AssetPlayerSyncNode;                                      // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Speed;                                                    // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Direction;                                                // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BodyLeanAngle;                                            // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HeadPitchDelta;                                           // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HeadYawDelta;                                             // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     LeftHandEffectorLocation;                                 // 0x0458(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	struct FVector                                     RightHandEffectorLocation;                                // 0x0464(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              HandIkAlpha;                                              // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bEnableHandIK;                                            // 0x0474(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bEnableDistanceMatching;                                  // 0x0475(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0476(0x0002) MISSED OFFSET
	class UAnimSequence*                               IdleAnim;                                                 // 0x0478(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RunStopLAnim;                                             // 0x047C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RunStopRAnim;                                             // 0x0480(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               WalkStopLAnim;                                            // 0x0484(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               WalkStopRAnim;                                            // 0x0488(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim1;                                          // 0x048C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomIdleAnim2;                                          // 0x0490(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 MovementAnim;                                             // 0x0494(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               JumpStartAnim;                                            // 0x0498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               FallingAnim;                                              // 0x049C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               IdleLandingAnim;                                          // 0x04A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RunLandingAnim;                                           // 0x04A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurnStartAnim;                                            // 0x04A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurningAnim;                                              // 0x04AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               TurnEndAnim;                                              // 0x04B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class URaptorAnimInstance>          OwnedRaptorAnimInstance;                                  // 0x04B4(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.RaptorDriverAnimInstance");
		return pStaticClass;
	}


	void OnOwnedRaptorJumped();
};


// Class Addons.RaptorMovementComponent
// 0x0040 (0x09E0 - 0x09A0)
class URaptorMovementComponent : public UBioVehicleMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x09A0(0x0008) MISSED OFFSET
	float                                              SpotTurnStartTime;                                        // 0x09A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpotTurnEndTime;                                          // 0x09AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              targetAngularSpeed;                                       // 0x09B0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpotTurnAngularSpeed;                                     // 0x09B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fBeginTurnInterpSpeed;                                    // 0x09B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fEndTurnInterpSpeed;                                      // 0x09BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngularSpeedLerpFactor;                                   // 0x09C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RightToLeftSpeedLerpFactor;                               // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowSpeedRotationThreshold;                                // 0x09C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PhysicsRotateTolerance;                                   // 0x09CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanAdjustMovementFloor;                                  // 0x09D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09D1(0x0003) MISSED OFFSET
	float                                              BreakOutAcclerationRate;                                  // 0x09D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BreakOutVelocityRate;                                     // 0x09D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 BreakOutAccResistanceCurve;                               // 0x09DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.RaptorMovementComponent");
		return pStaticClass;
	}


	float GetWalkingAccResistance(float Speed);
	float GetMaxAcceleration();
};


// Class Addons.RaptorVehicle
// 0x0020 (0x1380 - 0x1360)
class ARaptorVehicle : public ABioVehicleBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x1360(0x0008) MISSED OFFSET
	struct FName                                       LeftFootBoneName;                                         // 0x1368(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RightFootBoneName;                                        // 0x1370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanRideWhenSwimming;                                     // 0x1378(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x1379(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.RaptorVehicle");
		return pStaticClass;
	}


	void SetHandBrake(float rate);
	void ServerSetHandBrake(float rate);
	void MulticastDoJump();
	class URaptorMovementComponent* GetRaptorMovementComponent();
	void DoJump();
};


// Class Addons.TRexVehicleDamageComponent
// 0x0090 (0x0470 - 0x03E0)
class UTRexVehicleDamageComponent : public UBioVehicleDamageComponent
{
public:
	struct FName                                       DamageComponentTag;                                       // 0x03E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BlockComponentTag;                                        // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ImpulseOnCharacter;                                       // 0x03F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	class UCurveFloat*                                 VehicleHitCharcterImpulseCurve;                           // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultImpuleScale;                                       // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpulseCharacterZScale;                                   // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BioDamageVehicleCooldownTime;                             // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultHitVehicleDamage;                                  // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCollisionLocation;                                    // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	class ATyrannosaurusRexVehicle*                    OwnerVehicle;                                             // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData)
	TMap<class AActor*, float>                         BioDamageVehicleTimes;                                    // 0x0410(0x0050) (ZeroConstructor)
	TArray<class ASTExtraVehicleBase*>                 LastOverlapedVehicles;                                    // 0x044C(0x000C) (ZeroConstructor)
	TArray<class UActorComponent*>                     DamageCollisions;                                         // 0x0458(0x000C) (ExportObject, ZeroConstructor)
	class UPrimitiveComponent*                         BlockCollision;                                           // 0x0464(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.TRexVehicleDamageComponent");
		return pStaticClass;
	}


	void HandleFootOverlapVehicle(class ASTExtraVehicleBase* OverlappedVehicle, class UShapeComponent* DamageCollision, struct FOverlapResult* OverlapResult);
	void HandleFootOverlapCharacter(class ASTExtraBaseCharacter* OverlappedCharacter, class UShapeComponent* DamageCollision, struct FOverlapResult* OverlapResult);
};


// Class Addons.TyrannosaurusRexAnimInstance
// 0x0030 (0x05C0 - 0x0590)
class UTyrannosaurusRexAnimInstance : public ULandingCreatureAnimInstance
{
public:
	float                                              WalkSpeed;                                                // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeed;                                                 // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SprintSpeed;                                              // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinPlayRate;                                              // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxPlayRate;                                              // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ATyrannosaurusRexVehicle*                    TRex;                                                     // 0x05A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStartMoving;                                             // 0x05A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05A9(0x0003) MISSED OFFSET
	float                                              WalkPlayRate;                                             // 0x05AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RunPlayRate;                                              // 0x05B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintPlayRate;                                           // 0x05B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.TyrannosaurusRexAnimInstance");
		return pStaticClass;
	}


	void ResetStartMoving();
};


// Class Addons.TyrannosaurusRexVehicle
// 0x0180 (0x14E0 - 0x1360)
class ATyrannosaurusRexVehicle : public ABioVehicleBase
{
public:
	struct FName                                       RoarDetectSocket;                                         // 0x1360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarSpeedThreshold;                                       // 0x1368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarCD;                                                   // 0x136C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarStartAttackTime;                                      // 0x1370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarEndAttackTime;                                        // 0x1374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarAttackDeltaTime;                                      // 0x1378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoarDamage;                                               // 0x137C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                RoarMontage;                                              // 0x1380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RoarCameraShake;                                          // 0x1384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTRexApplyRoarAttack;                                    // 0x1388(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnServerTRexStartRoar;                                    // 0x1394(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnServerTRexFinishRoar;                                   // 0x13A0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAkAudioEvent*                               TRexRoarAudioEvent;                                       // 0x13AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TRexBodyMatSlotName;                                      // 0x13B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ShelfMatSlotName;                                         // 0x13B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           BodyNormalMaterial;                                       // 0x13C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           ShelfNormalMaterial;                                      // 0x13C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           BodyInjuredMaterial;                                      // 0x13C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           ShelfInjuredMaterial;                                     // 0x13CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           BodySeverelyInjuredMaterial;                              // 0x13D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           ShelfSeverelyInjuredMaterial;                             // 0x13D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnServerTRexBreakOut;                                     // 0x13D8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              TRexBreakOutCD;                                           // 0x13E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TRexBreakOutInterval;                                     // 0x13E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          LightInjuredMat;                                          // 0x13EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          HeavyInjuredMat;                                          // 0x13F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ModifyPhysCD;                                             // 0x13F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	ETyranState                                        STCurWalkState;                                           // 0x13F8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x13F9(0x0007) MISSED OFFSET
	struct FName                                       BrokenCapsuleSocket;                                      // 0x1400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrokenCapsuleRadius;                                      // 0x1408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrokenCapsuleHeight;                                      // 0x140C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrokenDelayTime;                                          // 0x1410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DragOffsetZ;                                              // 0x1414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             DragOffsets;                                              // 0x1418(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DeadAfterTime;                                            // 0x1424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    BioVehicleDestroyDelegate;                                // 0x1428(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               DeadDirection;                                            // 0x1434(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x27];                                      // 0x1435(0x0027) MISSED OFFSET
	float                                              RoarCurrentCD;                                            // 0x145C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsRoaring;                                               // 0x1460(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x1461(0x000B) MISSED OFFSET
	TMap<class AActor*, float>                         BioModifyVehicleTimes;                                    // 0x146C(0x0050) (ZeroConstructor)
	class URaptorMovementComponent*                    TRexMovementComponent;                                    // 0x14A8(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              HurtInterval;                                             // 0x14AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x14B0(0x0004) MISSED OFFSET
	float                                              HurtDamageAmount;                                         // 0x14B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x14B8(0x0008) MISSED OFFSET
	class UAnimMontage*                                HurtMontage;                                              // 0x14C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x14C4(0x0004) MISSED OFFSET
	struct FName                                       LeftFootBoneName;                                         // 0x14C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightFootBoneName;                                        // 0x14D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x14D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.TyrannosaurusRexVehicle");
		return pStaticClass;
	}


	void ShowRoarOverSpeedTips();
	void ShakeNearbyPlayerCamera(class UClass* CameraShakeClass, float Radius);
	void ServerStopRoar();
	void ServerRoar();
	void ServerBreakOut(bool bEnable);
	void PrepareApplyRoarAttack();
	void OnTRexHPCHanged(float NewHP, float HPMax);
	void OnRoarFinished(TEnumAsByte<EBioVehicleSkillStopReason> Reason);
	void OnRep_bIsRoaring();
	class URaptorMovementComponent* GetVehicleMovement();
	bool GetVehicleBreakOutState();
	bool GetNearlyPlayers(float Radius, TArray<class ASTExtraBaseCharacter*>* Results);
	void EndRoarAttack();
	void ClientHandleVehicleDead(bool VehicleDeadDirection);
	bool CheckCanApplyDamageTo(class ASTExtraBaseCharacter* Target);
	void CallClientDrawDebugSphere(const struct FVector& Location, float DeltaTime);
	void BroadCastStopMontage();
	void BroadCastPlayRoarMontage();
	void BroadCastClientDrawSphere(const struct FVector& Center, float Radius);
	void BreakOut(bool bEnable);
	void ApplyRoarAttackToSpecifiedCharacter(class ASTExtraBaseCharacter* TargetCharacter);
	void ApplyRoarAttack();
};


// Class Addons.VehicleRubberDuck
// 0x0040 (0x10C0 - 0x1080)
class AVehicleRubberDuck : public ASTExtraVehicleBase
{
public:
	float                                              Audio_RpmScale;                                           // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Audio_VelocityScale;                                      // 0x1084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UFloatingVehicleVehicleMovementComponent2*   VehicleMovement;                                          // 0x1088(0x0004) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bCacheSfxStatusWhenLinked;                                // 0x108C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bLocalPlayerOnCurLink;                                    // 0x108D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1A];                                      // 0x108E(0x001A) MISSED OFFSET
	unsigned char                                      bUseMultiPositionWhenLinked : 1;                          // 0x10A8(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x10A9(0x0003) MISSED OFFSET
	float                                              MultiPosSoundTickInterval;                                // 0x10AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_EngineLoop_UnLinked;                                  // 0x10B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_EngineLoop_Linked_Autonomous;                         // 0x10B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_EngineLoop_Linked_Simulated;                          // 0x10B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class URollBalanceComponent*                       RollBalance;                                              // 0x10BC(0x0004) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class Addons.VehicleRubberDuck");
		return pStaticClass;
	}


	class UFloatingVehicleVehicleMovementComponent2* GetVehicleMovement();
	float GetForwardSpeed();
};


}

