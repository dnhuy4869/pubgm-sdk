#pragma once

// PUBG MOBILE 2.7.0 SDK generated by Huy#3877 

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class DBGame.BackpackComponentDBZ
// 0x0050 (0x03F8 - 0x03A8)
class UBackpackComponentDBZ : public UBackpackComponent
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x03A8(0x0014) MISSED OFFSET
	struct FIncNetArrayDBZ                             ItemListNetDBZCache;                                      // 0x03BC(0x0018)
	struct FScriptMulticastDelegate                    ItemListOrderUpdatedDelegate;                             // 0x03D4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FItemDefineID>                       BroadcastOrderChangeItemList;                             // 0x03E0(0x000C) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03EC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackComponentDBZ");
		return pStaticClass;
	}


	void ServerExchangeItemPos(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	void ReceiveItemListDBZ();
	void OnRep_ItemListNetDBZ();
	void NotifyItemUpdated(const struct FItemDefineID& DefineID);
	void NotifyItemRemoved(const struct FItemDefineID& DefineID);
	void NotifyItemListUpdated();
	EWeaponAttachmentSocketType GetWeaponAttachType(int weaponattachID);
	bool GetWeaponAttachSameType(int weaponattachID1, int weaponattachID2);
	int GetSameTypeSupperWeaponAttachNum(int weaponattachID);
};


// Class DBGame.BackpackDBZEquiptHandle
// 0x0000 (0x00F8 - 0x00F8)
class UBackpackDBZEquiptHandle : public UBattleItemHandleBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZEquiptHandle");
		return pStaticClass;
	}


	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
};


// Class DBGame.BackpackDBZUtils
// 0x0000 (0x0020 - 0x0020)
class UBackpackDBZUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZUtils");
		return pStaticClass;
	}


	static void UnRegisterInvokeClass();
	static void SetIsNeedInitTable(bool IsNeedInit);
	static void RegisterInvokeClass();
	static class UBackpackBlueprintDBZUtils* RealGetBPUtils();
	static void PickupFromGround(class UBackpackComponent* BackpackComp, class APickUpWrapperActor* Source, const struct FBattleItemUseTarget& AutoEquipTarget, bool bForceAutoEquip, int pickCount, EBattleItemClientPickupType BattleItemClientPickupType);
	static int GetWeaponAttachHightLevelId(class UBackpackComponent* BackpackComp, int attach1, int attach2);
	static int GetDBZEquipmentType();
	static struct FItemDefineID GetAvatarRealDefineID(const struct FItemDefineID& DefineID);
};


// Class DBGame.BackpackBlueprintDBZUtils
// 0x0000 (0x09E0 - 0x09E0)
class UBackpackBlueprintDBZUtils : public UBackpackBlueprintUtils
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackBlueprintDBZUtils");
		return pStaticClass;
	}

};


// Class DBGame.BackpackDBZWeaponAttachHandle
// 0x0000 (0x00F8 - 0x00F8)
class UBackpackDBZWeaponAttachHandle : public UBattleItemHandleBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZWeaponAttachHandle");
		return pStaticClass;
	}


	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
};


// Class DBGame.CustomSpringArmDBZComponent
// 0x0130 (0x0B10 - 0x09E0)
class UCustomSpringArmDBZComponent : public UCustomSpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x09E0(0x0020) MISSED OFFSET
	struct FCameraOffsetData                           DBZAimCameraData;                                         // 0x0A00(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZFlyCameraData;                                         // 0x0A2C(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZSaveCameraData;                                        // 0x0A58(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZFireCameraData;                                        // 0x0A84(0x002C)
	bool                                               bEnablePitchArmLenthModify;                               // 0x0AB0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0AB1(0x0003) MISSED OFFSET
	TArray<EPawnState>                                 DisablePawnStates;                                        // 0x0AB4(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              PitchAngleToUp;                                           // 0x0AC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTargetArmLength;                                       // 0x0AC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArmLengthChangePerAnge;                                   // 0x0AC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<TEnumAsByte<EDBZCameraDataType>, bool>        CurActiveDBZDataMap;                                      // 0x0ACC(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0B08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.CustomSpringArmDBZComponent");
		return pStaticClass;
	}


	void StopCameraShake(class UClass* Shake, bool bImmediately);
	void SetFireCameraData(const struct FVector& socket, const struct FVector& Target, float SpringArm, float AdditiveFov);
	void SetDBZCameraDataEnable(TEnumAsByte<EDBZCameraDataType> CameraDataType, bool IsEnable);
	void PlayCameraShake(class UClass* Shake, float Scale);
	bool HasActiveDBZCameraOffsetData(TEnumAsByte<EDBZCameraDataType> InDataType);
};


// Class DBGame.DBZCharacterEffectComponent
// 0x0028 (0x0178 - 0x0150)
class UDBZCharacterEffectComponent : public ULuaActorComponent
{
public:
	TArray<struct FCharacterParticleEffect>            CharacterEffectsSetting;                                  // 0x0150(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     DebugStringOffset;                                        // 0x015C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class ASTExtraBaseCharacter*                       OwnerCharacter;                                           // 0x0168(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x016C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZCharacterEffectComponent");
		return pStaticClass;
	}


	void UpdateCharacterParticleEffect();
	void RefreshCharacterParticleEffects(int HeroID);
	bool CheckCharacterCanPlayEffect(struct FCharacterParticleEffect* Effect);
};


// Class DBGame.DBZPlayerGunCollosionComp
// 0x0020 (0x0190 - 0x0170)
class UDBZPlayerGunCollosionComp : public UPlayerGunCollosionComp
{
public:
	float                                              ReverCollosionDistance;                                   // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PreCollisionStartPoint;                                   // 0x0174(0x000C) (IsPlainOldData)
	struct FVector                                     PreCollisionHitPoint;                                     // 0x0180(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZPlayerGunCollosionComp");
		return pStaticClass;
	}

};


// Class DBGame.DBZProjectileBase
// 0x0318 (0x0620 - 0x0308)
class ADBZProjectileBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x7C];                                      // 0x0308(0x007C) MISSED OFFSET
	class UPVEProjectileMovementComponent*             PMComp;                                                   // 0x0384(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bFirstFrameAlign;                                         // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0389(0x0003) MISSED OFFSET
	float                                              MaxLifeSpan;                                              // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bServerAlreadyExploded;                                   // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bClientAlreadyRespawn;                                    // 0x0394(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bAlreadyHitInnerObject;                                   // 0x0398(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InnerRadius;                                              // 0x039C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRadiusExplode;                                     // 0x03A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	float                                              DamageInnerRadius;                                        // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageOuterRadius;                                        // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x03B0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DelayFlyTime;                                             // 0x03B4(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsRay;                                                   // 0x03B8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bNeedCheckMaxDistance;                                    // 0x03B9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x03BC(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsHoming;                                                // 0x03C0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRandomStartVelocity;                                   // 0x03C1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x03C2(0x0002) MISSED OFFSET
	float                                              MinConeHalfAngleRadY;                                     // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadY;                                     // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinConeHalfAngleRadZ;                                     // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadZ;                                     // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFixStartVelocity;                                        // 0x03D4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	float                                              FixOffsetY;                                               // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FixOffsetZ;                                               // 0x03DC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeed;                                    // 0x03E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeedMaxScale;                            // 0x03E4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RadSpeedMinLimit;                                         // 0x03E8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RadSpeedMaxLimit;                                         // 0x03EC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HomingEscapeDistance;                                     // 0x03F0(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bHomingAllDirection;                                      // 0x03F4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET
	float                                              HomingAllDirectionRadius;                                 // 0x03F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletOriginalScale;                                      // 0x03FC(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAttrEnergyScale;                                    // 0x0400(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAttrRangeScale;                                     // 0x0404(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              FinalBulletScale;                                         // 0x0408(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentDynamicScale;                                      // 0x040C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FDynamicScaleData                           DynamicScaleData;                                         // 0x0410(0x0008) (Net)
	bool                                               bHasBeenThrowedOut;                                       // 0x0418(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     InitLocation;                                             // 0x0420(0x000C) (Net, IsPlainOldData)
	struct FVector                                     StartVelocity;                                            // 0x042C(0x000C) (IsPlainOldData)
	float                                              PreHitFrameRate;                                          // 0x0438(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bExplodedAtActorLocation;                                 // 0x043C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xDB];                                      // 0x043D(0x00DB) MISSED OFFSET
	class AActor*                                      ClientPreHitPawn;                                         // 0x0518(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     ClientPreHitPawnLoc;                                      // 0x051C(0x000C) (IsPlainOldData)
	bool                                               bWeakNetworkOptimize;                                     // 0x0528(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0529(0x0003) MISSED OFFSET
	float                                              OptimizeEnemyMoveMaxDistance;                             // 0x052C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeEnemyMinDistance;                                 // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMaxDelta;                                         // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMinPing;                                          // 0x0538(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMaxPing;                                          // 0x053C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletLaunchVerifyDistance;                               // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              BlockCheckObjectTypes;                                    // 0x0544(0x000C) (Edit, ZeroConstructor)
	TWeakObjectPtr<class ASTExtraShootWeapon>          OwnerShootWeapon;                                         // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawInnerCollision;                                 // 0x0558(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawOuterCollision;                                 // 0x0559(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x055A(0x0002) MISSED OFFSET
	int                                                DebugSegments;                                            // 0x055C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitDamage;                                                // 0x0560(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreOwner;                                             // 0x0564(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsIgnoreTeammate;                                        // 0x0565(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x0566(0x0002) MISSED OFFSET
	float                                              ProjectileGravityScale;                                   // 0x0568(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TotalFlyTime;                                             // 0x056C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bAttachToMovePlatform;                                    // 0x0570(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0571(0x0003) MISSED OFFSET
	TMap<class AActor*, int>                           ActorImpactTimes;                                         // 0x0574(0x0050) (ZeroConstructor)
	struct FVector                                     TargetActorLocation;                                      // 0x05B0(0x000C) (Net, IsPlainOldData)
	struct FVector                                     TargetActorOffset;                                        // 0x05BC(0x000C) (IsPlainOldData)
	struct FVector                                     StartFlySocketOffset;                                     // 0x05C8(0x000C) (IsPlainOldData)
	struct FVector                                     LastLocation;                                             // 0x05D4(0x000C) (IsPlainOldData)
	int                                                RelatedSkillID;                                           // 0x05E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     LuaFilePath;                                              // 0x05E4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData13[0x20];                                      // 0x05F0(0x0020) MISSED OFFSET
	float                                              ProjectileDataUpdateFrequency;                            // 0x0610(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0xC];                                       // 0x0614(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZProjectileBase");
		return pStaticClass;
	}


	void VerifyStartLocation();
	void UpdateServerProjectileData();
	void UpdateFollowVelocity(float InDeltaTime);
	void StartFly(const struct FVector& StartLocation, const struct FVector& InVelocity, float InGravityScale);
	void SetTargetActor(class AActor* InTargetActor);
	void RPC_Multicast_OnImpact(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale);
	struct FVector RandomRotateFlyDirection(const struct FVector& InOriginalDir, float InMinRadY, float InMaxRadY, float InMinRadZ, float InMaxRadZ);
	void PreHandleImpactOnClient(const struct FHitResult& InImpactResult);
	void OnStartFly();
	void OnRep_TargetActorLocation();
	void OnRep_TargetActor();
	void OnRep_DynamicScaleData();
	void OnProjectileExplodedOutOfTime();
	void OnProjectileDestroy();
	void OnInit();
	void OnImpact(const struct FHitResult& InImpactResult);
	void HandleRespawned();
	void HandleRecycled();
	void HandleImpactOnServer(const struct FHitResult& InImpactResult, EDBZDestroyType InDestroyType);
	void HandleImpactOnClient(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale);
	void HandleApplyDamage(const struct FHitResult& InImpactResult, const struct FVector& InHitPoint, EDBZDestroyType InDestroyType);
	float GetWeakNetAdjustStrength(float InPing);
	class AActor* GetTheNearestActor(TArray<class AActor*> InActorList);
	class AActor* GetTargetActor();
	struct FVector GetStartVelocity();
	class ASTExtraShootWeapon* GetOwnerShootWeapon();
	float GetFlyRotationCoefficient(float InDistance);
	struct FVector FixRotateFlyDirection(const struct FVector& InOriginalDir, float InThetaX, float InThetaY);
	void DetectFollowTarget(float InDeltaTime);
	bool CheckIsOutOfRange(const struct FVector& InCheckLoc);
	bool CheckImpactInLastTrack(const struct FVector& InTraceStartLoc, const struct FVector& InTraceEndLoc);
	void CauseDamageToActor(class AActor* ImpactActor);
	void BPOnStartFly();
	void BPDealDamage();
	void AdjustStartVelocity();
};


// Class DBGame.DBZShootWeapon
// 0x0130 (0x10D0 - 0x0FA0)
class ADBZShootWeapon : public ASTExtraShootWeapon
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0FA0(0x0038) MISSED OFFSET
	TMap<EPawnState, bool>                             EnableStateModifyAttrMap;                                 // 0x0FD8(0x0050) (ZeroConstructor, Transient)
	float                                              CrossHairColorCheckDeltaTime;                             // 0x1014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckAngele;                                // 0x1018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckDistance;                              // 0x101C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckDistance2;                             // 0x1020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorLastCheckTime;                              // 0x1024(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class ASTExtraBaseCharacter*                       LastAimTarget;                                            // 0x1028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class ASTExtraBaseCharacter*                       TargetOfLastSendAimEvent;                                 // 0x102C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfLastSendAimEvent;                                   // 0x1030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfForceSendAimEvent;                                  // 0x1034(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<struct FWeaponCrossHairPerformData>         DotCrossHairData;                                         // 0x1038(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DotCrossHairDeltaTime;                                    // 0x1044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DotCrossHairValidTime;                                    // 0x1048(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RunAimEffectFreq;                                         // 0x104C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastRunAimEffectTime;                                     // 0x1050(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FWeaponCameraInfo                           RecentCameraInfo;                                         // 0x1054(0x0018) (BlueprintVisible, Net)
	bool                                               bIsAimEffectValid;                                        // 0x106C(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x106D(0x0003) MISSED OFFSET
	class UParticleSystemComponent*                    AimEffect;                                                // 0x1070(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              AimEffectLastTime;                                        // 0x1074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectAngle;                                           // 0x1078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectMaxDistance;                                     // 0x107C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectMinDistance;                                     // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectLifeTime;                                        // 0x1084(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<float>                                      BurstShootIntervalArray;                                  // 0x1088(0x000C) (BlueprintVisible, ZeroConstructor)
	EDBZBulletPreCollosionType                         BulletPreCollosionType;                                   // 0x1094(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1095(0x0003) MISSED OFFSET
	struct FName                                       PreCollosionStartSocketName;                              // 0x1098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PreCollosionStartOffset;                                  // 0x10A0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionLength;                                       // 0x10AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PreCollosionSkillID;                                      // 0x10B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam1;                                       // 0x10B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam2;                                       // 0x10B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam3;                                       // 0x10BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForbidFireWhenHandleInFold;                              // 0x10C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x10C1(0x0003) MISSED OFFSET
	struct FString                                     FireRateScaleModifyName;                                  // 0x10C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZShootWeapon");
		return pStaticClass;
	}


	void TickStateModifyAttr();
	void TickDrawDotCrossHairData();
	void TickAimEffect();
	void SetIsEnableScopeInFromEntity(bool Enable);
	void RefreshAimEffectActiveTime();
	void RealShootBulletWithoutParam();
	void RealShootBullet(const struct FVector& StartLoc, const struct FRotator& StartRot);
	void OnRep_RecentCameraInfo();
	void OnRep_IsAimEffectValid();
	void NotifyServerRecentCameraInfo(const struct FWeaponCameraInfo& CameraInfo);
	bool IsNeedUploadCameraInfo();
	void InserNextBurstShootInterval(float interval);
	void HandleOnRepRecentCameraInfo();
	class ASTExtraBaseCharacter* GetNearestAimTarget();
	class ASTExtraBaseCharacter* GetAimingCharacter();
	void ExitDrawDotCrossHairData();
	void EnterDrawDotCrossHairData(float DeltaTime);
	void CurBulletChangeBroadcast();
	void ConditionChangeCrossHairColor();
	void AddAimEffectActiveTime(float ExtraTime);
};


// Class DBGame.PlummetGuideActor
// 0x0088 (0x0420 - 0x0398)
class APlummetGuideActor : public ALuaActor
{
public:
	class UMaterialInstance*                           DecalMaterialInstance;                                    // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FadingTime;                                               // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DecalSize;                                                // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x03A4(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x03B0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	class UCustomDecalComponent*                       DecalComponent;                                           // 0x03BC(0x0004) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       ColorName;                                                // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                NoEnemyColor;                                             // 0x03C8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                FoundEnemyColor;                                          // 0x03D8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              TickDecalColorDelta;                                      // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLocation;                                          // 0x03EC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnColorChanged;                                           // 0x03F8(0x000C) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0404(0x0014) MISSED OFFSET
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x0418(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x041C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PlummetGuideActor");
		return pStaticClass;
	}


	void PendingDestroy();
	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.PlummetWarningActor
// 0x0070 (0x0408 - 0x0398)
class APlummetWarningActor : public ALuaActor
{
public:
	float                                              WarningTime;                                              // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DisappearTime;                                            // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExistsTime;                                               // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WarningSize;                                              // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           OuterMaterial;                                            // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           InnerMaterial;                                            // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x03B0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x03BC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                TeammateColor;                                            // 0x03C8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                EnemyColor;                                               // 0x03D8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bOnlyDisplayToOwner;                                      // 0x03E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              ShrinkSpeedFactor;                                        // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03F0(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    LocParticleSystem;                                        // 0x03F4(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCustomDecalComponent*                       OuterDecalComponent;                                      // 0x03F8(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCustomDecalComponent*                       InnerDecalComponent;                                      // 0x03FC(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x0400(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PlummetWarningActor");
		return pStaticClass;
	}


	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.PVEProjectileFollow
// 0x0090 (0x0428 - 0x0398)
class APVEProjectileFollow : public ALuaActor
{
public:
	struct FVector                                     StartLocationForwardOffset;                               // 0x0398(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     StartLocationForwardExtraOffset;                          // 0x03A4(0x000C) (BlueprintVisible, Net, IsPlainOldData)
	float                                              EndLocationForwardOffset;                                 // 0x03B0(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              EndLocationForwardOffsetExtra;                            // 0x03B4(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B8(0x0001) MISSED OFFSET
	bool                                               bLocationCorrected;                                       // 0x03B9(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     AutoCorrectRotationCollisionChannel;                      // 0x03BA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03BB(0x0001) MISSED OFFSET
	float                                              FollowDelta;                                              // 0x03BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LocationOffsetSizeCheckSq;                                // 0x03C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoCorrectRotation;                                     // 0x03C4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHoldDestinationLocation;                                 // 0x03C5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeOwnersLook;                                      // 0x03C6(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSimulateUseLocalLocation;                                // 0x03C7(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeHitPoint;                                        // 0x03C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeSimulateView;                                    // 0x03C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	float                                              UpdateOffsetDistanceSq;                                   // 0x03CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               StartLocationSockets;                                     // 0x03D0(0x000C) (BlueprintVisible, ZeroConstructor)
	float                                              RotationChangingSmoothFactor;                             // 0x03DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkFactor;                                             // 0x03E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkSpeedUpFactor;                                      // 0x03E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkToDestroyFactor;                                    // 0x03E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndStartPointCheckAngleMax;                               // 0x03EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x03F0(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileFollow");
		return pStaticClass;
	}


	void SetStartLocationForwardOffset(const struct FVector& StartLocationForwardOffsetWorld);
	void RPC_Server_UpdateLocationOffset(const struct FVector_NetQuantize10& LocationOffset);
	void OnRep_LocationCorrected();
};


// Class DBGame.PVEProjectileGrenade
// 0x0008 (0x0430 - 0x0428)
class APVEProjectileGrenade : public APVEProjectileFollow
{
public:
	float                                              GrenadeSpeedFactor;                                       // 0x0428(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x042C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileGrenade");
		return pStaticClass;
	}

};


// Class DBGame.PVEProjectileRay
// 0x0258 (0x0680 - 0x0428)
class APVEProjectileRay : public APVEProjectileFollow
{
public:
	struct FRaySegmentedSoundEffect                    LoopSoundEffect;                                          // 0x0428(0x0070) (Edit, BlueprintVisible)
	struct FRaySegmentedSoundEffect                    DisappearSoundEffect;                                     // 0x0498(0x0070) (Edit, BlueprintVisible)
	float                                              PlayersOverlapingRadius;                                  // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeInnerRadius;                                       // 0x050C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeOuterRadius;                                       // 0x0510(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeFalloff;                                           // 0x0514(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DamageTypeClass;                                          // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x051C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              DamageScaleDelta;                                         // 0x0520(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDelta;                                             // 0x0524(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      RayRadiuses;                                              // 0x0528(0x000C) (BlueprintVisible, Net, ZeroConstructor)
	TArray<float>                                      RayRadiusesOffsetServer;                                  // 0x0534(0x000C) (BlueprintVisible, Net, ZeroConstructor)
	float                                              RadiusScaleDelta;                                         // 0x0540(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FString                                     EffectURL;                                                // 0x0544(0x000C) (BlueprintVisible, Net, ZeroConstructor)
	float                                              LengthIncreasePerSecond;                                  // 0x0550(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<bool>                                       bRayCheckObstacles;                                       // 0x0554(0x000C) (BlueprintVisible, Net, ZeroConstructor)
	TArray<TEnumAsByte<ECollisionChannel>>             CollisionChannels;                                        // 0x0560(0x000C) (BlueprintVisible, Net, ZeroConstructor)
	float                                              RayHalf;                                                  // 0x056C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceComplex;                                            // 0x0570(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceSimpleClient;                                       // 0x0571(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bRayEndWhenHitted;                                        // 0x0572(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreTeammate;                                          // 0x0573(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoFollowOwner;                                         // 0x0574(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugRayTrace;                                           // 0x0575(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnorePlayerHitWhenFirstHitByObstacle;                   // 0x0576(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0577(0x0001) MISSED OFFSET
	float                                              RayStartPosDistOffset;                                    // 0x0578(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinApplyDamageRayLengthSquared;                           // 0x057C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepBackDistance;                                         // 0x0580(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              ToDestroyedRadius;                                        // 0x0584(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ExplodeHitBuffs;                                          // 0x0588(0x000C) (BlueprintVisible, ZeroConstructor)
	struct FApplyRadialDamageMomentum                  Momentum;                                                 // 0x0594(0x0064) (BlueprintVisible)
	struct FScriptMulticastDelegate                    RayOutHitDelegate;                                        // 0x05F8(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayUpdateRayWidthDelegate;                                // 0x0604(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayUpdateRayParticleDelegate;                             // 0x0610(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayHitEnemyDelegate;                                      // 0x061C(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayOverlapEnemyDelegate;                                  // 0x0628(0x000C) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCapsuleComponent*                           CapsuleCollision;                                         // 0x0634(0x0004) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                HitCount;                                                 // 0x0638(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastHitTime;                                              // 0x063C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RayAccumulatorTimeResetThreshold;                         // 0x0640(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TickOverlapingPlayersInterval;                            // 0x0644(0x0004) (ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DisappearCurve;                                           // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x064C(0x0018) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerWeapon;                                              // 0x0664(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0668(0x000C) MISSED OFFSET
	struct FVector_NetQuantize                         RayEndPos;                                                // 0x0674(0x000C) (Net)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileRay");
		return pStaticClass;
	}


	void ResetHitData();
	void OnRadiusScaleDeltaChanged();
	void OnEffectURLChanged();
	class ASTExtraShootWeapon* GetOwnerShootWeapon();
	float GetElaspedTime();
	float GetDisplayRadius();
	float GetDamage();
	float GetAvgRadius();
};


// Class DBGame.PVEProjectileRaysManager
// 0x0048 (0x03E0 - 0x0398)
class APVEProjectileRaysManager : public ALuaActor
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0398(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileRaysManager");
		return pStaticClass;
	}


	TArray<class APVEProjectileRay*> GetRays(TEnumAsByte<ENetRole> InRole);
};


// Class DBGame.STBuffAction_RenderCustomDecal
// 0x0050 (0x0088 - 0x0038)
class USTBuffAction_RenderCustomDecal : public USTBuffAction
{
public:
	float                                              LastingTime;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DecalSize;                                                // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x0040(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x004C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FName                                       ColorName;                                                // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DecalColor;                                               // 0x0060(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FName                                       TickScalarName;                                           // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TickScalarDelta;                                          // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DisappearCurve;                                           // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           DecalMaterialInstance;                                    // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_RenderCustomDecal");
		return pStaticClass;
	}


	void OnTick(float DeltaTime);
	void OnExecute();
	void OnEnd();
	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.STBuffAction_ReplaceJumpAnim
// 0x0010 (0x0048 - 0x0038)
class USTBuffAction_ReplaceJumpAnim : public USTBuffAction
{
public:
	TArray<struct FSkillReplaceJumpAnimData>           AnimDataList;                                             // 0x0038(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_ReplaceJumpAnim");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class DBGame.STBuffAction_SetCharacterFallingMovement
// 0x0008 (0x0040 - 0x0038)
class USTBuffAction_SetCharacterFallingMovement : public USTBuffAction
{
public:
	float                                              OverrideFlyGravityScale;                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothTransferFactor;                                     // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_SetCharacterFallingMovement");
		return pStaticClass;
	}


	void OnTick(float DetalTime);
	void OnExecute();
	void OnEnd();
	void OnDestroy();
};


// Class DBGame.STExtraDBZAnimInstance
// 0x0180 (0x10D0 - 0x0F50)
class USTExtraDBZAnimInstance : public USTExtraAnimInstance
{
public:
	struct FName                                       GroundAttackSlotName;                                     // 0x0F50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FlyAttackSlotName;                                        // 0x0F58(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldUpdateAttackType;                                  // 0x0F60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0F61(0x0003) MISSED OFFSET
	int                                                AimOffsetBoneChainNum;                                    // 0x0F64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoAimOffsetSpeedThreshold;                                // 0x0F68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffsetLerpSpeed;                                       // 0x0F6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Max;                                      // 0x0F70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Min;                                      // 0x0F74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewDeltaLerpSpeed;                                       // 0x0F78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewDeltaMaxYaw;                                          // 0x0F7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 SpinePitchYawMappedCurve;                                 // 0x0F80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlyUpPelvisLerpSpeed;                                     // 0x0F84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFlyUpPelvisOffset;                                     // 0x0F88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableHeadOverlappedDetect;                              // 0x0F8C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0F8D(0x0003) MISSED OFFSET
	float                                              OverlappedDistance;                                       // 0x0F90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     OverlapDetectOffset;                                      // 0x0F94(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadOverlappedRadius;                                     // 0x0FA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadOverlappedDetectInterval;                             // 0x0FA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Max_Overlapped;                           // 0x0FA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Min_Overlapped;                           // 0x0FAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<float, float>                                 HeroSpecifiedPelvisOffset;                                // 0x0FB0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0FEC(0x0004) MISSED OFFSET
	struct FName                                       DisablePelvisModifyCurveName;                             // 0x0FF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EnableHandIKCurveName;                                    // 0x0FF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ASTExtraDBZCharacter*                        OwnerDBZCharacter;                                        // 0x1000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFlyState>                             CurrentFlyState;                                          // 0x1004(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAttackMontageType                                 CurrentAttackMontageType;                                 // 0x1005(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         CurrentMovementMode;                                      // 0x1006(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECharacterJumpType>                    CurrentJumpType;                                          // 0x1007(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving;                                                // 0x1008(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               b_Flying;                                                 // 0x1009(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x100A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSaving;                                                // 0x100B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFalling;                                               // 0x100C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHardLanding;                                             // 0x100D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldOverrideAttackAnimation;                           // 0x100E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHeadOverlapped;                                          // 0x100F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VelocityScale;                                            // 0x1010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LandingHardVelocityZ;                                     // 0x1014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              f_FlyForwarRate;                                          // 0x1018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              f_FlyRightRate;                                           // 0x101C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch;                                          // 0x1020(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_01;                                 // 0x1024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_02;                                 // 0x1028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_03;                                 // 0x102C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Neck;                                     // 0x1030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw;                                            // 0x1034(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_01;                                   // 0x1038(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_02;                                   // 0x103C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_03;                                   // 0x1040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Neck;                                       // 0x1044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PelvisOffset;                                             // 0x1048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EnablePelvisModifyCurveValue;                             // 0x104C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EnableHandIKCurveValue;                                   // 0x1050(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    CurrentViewDelta;                                         // 0x1054(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    FlyUpPelvisOffset;                                        // 0x1060(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UAnimSequence*                               C_FlyUp_Sequence;                                         // 0x106C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_PrepareFlyUp;                                           // 0x1070(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyUp_WindField_Sequence;                               // 0x1074(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_JumpInPlace_Sequence;                                   // 0x1078(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_MoveJump_Sequence;                                      // 0x107C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyMove_Blend;                                          // 0x1080(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyHit_Blend;                                           // 0x1084(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyAim_Blend;                                           // 0x1088(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyDBNOBegin;                                           // 0x108C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyDBNOLoop;                                            // 0x1090(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_DBNOBegin;                                              // 0x1094(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_DBNO_Blend;                                             // 0x1098(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                C_MontageDead_Fly;                                        // 0x109C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_IdleToReadyFlyAnim;                                     // 0x10A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_ReadyFlyingAnim;                                        // 0x10A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_ReadyFlyToFlyUpAnim;                                    // 0x10A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FreeFallingAnim;                                        // 0x10AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FreeFallingTransitionAnim;                              // 0x10B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x10B4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STExtraDBZAnimInstance");
		return pStaticClass;
	}


	void UpdateParam(float DeltaSeconds);
	void UpdateHeadOverlapped(float DeltaSeconds);
	void UpdateAttackType();
	void UpdateAnimCurve(float DeltaSeconds);
	void UpdateAimOffset(float DeltaSeconds);
	void RefreshHeroSpecifiedParam(int HeroID);
	void PlayPlayerDeadAnimation();
	void OnExitLanding();
	void LuaInitializeAnimation();
};


// Class DBGame.STExtraDBZCharacter
// 0x0120 (0x57B0 - 0x5690)
class ASTExtraDBZCharacter : public ASTExtraPlayerCharacter
{
public:
	TArray<struct FDBZHitBoxConfig>                    DBZHitBoxConfigArray;                                     // 0x5690(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DBZHitBoxHalfHeight;                                      // 0x569C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DBZHitBoxRadius;                                          // 0x56A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DBZHitBoxTickFrequency;                                   // 0x56A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DBZHitBoxTickCount;                                       // 0x56A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UCapsuleComponent*                           DBZHitBoxComp;                                            // 0x56AC(0x0004) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              EquipmentDurabilityForReplay;                             // 0x56B0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPrePushRawDamage;                                       // 0x56B4(0x000C) (ZeroConstructor, InstancedReference)
	TMap<int, class UAkAudioEvent*>                    HeroFooStepSetting;                                       // 0x56C0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              MinLandingVelocityZ;                                      // 0x56FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingHardVelocityZ;                                     // 0x5700(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<EPawnState>                                 ForceJumpInPlaceStates;                                   // 0x5704(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MeleeUpMontageSlotName;                                   // 0x5710(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldHardLanding;                                       // 0x5718(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bForceHardLandingNextTime;                                // 0x5719(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ECharacterJumpType>                    CurrentJumpType;                                          // 0x571A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAttackFlag;                                              // 0x571B(0x0001) (ZeroConstructor, IsPlainOldData)
	float                                              LastLeaveAttackFlagTime;                                  // 0x571C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bCanDrawWeaponCrossHair;                                  // 0x5720(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x5721(0x0003) MISSED OFFSET
	float                                              TimeOfLastPostDrawCrossEvent;                             // 0x5724(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfForcePostDrawCrossEvent;                            // 0x5728(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FDBZHurtFlowStr                             CurDBZHurtFlow;                                           // 0x572C(0x007C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x57A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STExtraDBZCharacter");
		return pStaticClass;
	}


	void UpdateGunADSHiddenPawn();
	void ResetCharacter();
	void RefreshHeroSpecifiedParam(int NewHeroID);
	void MarkAttackFlag(bool Flag);
	bool GetShouldHardLanding();
	class ASTExtraPlayerCharacter* GetOneBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle);
	bool GetMarkAttackFlag(float RecentTime);
	TArray<struct FAimTargetInfo> GetEnemyInRange(float MaxDistance, float MaxAngle);
	float GetDBZDamageScale(class AActor* DamageCauser);
	TArray<class ASTExtraPlayerCharacter*> GetBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle, int Num);
	void BroadcastClientsSimulateEquipmentDamageInfo(class ASTExtraBaseCharacter* DamageCauser, float FinalDamage, float EquipentReduce, bool brokenEquipment);
	void AddWeaponGeneralCount(int WeaponId, const struct FString& GenraString, float GeneralValue, bool Reset);
};


// Class DBGame.TailAnimInstance
// 0x0010 (0x0310 - 0x0300)
class UTailAnimInstance : public UAvatarDynamicAnimInstance
{
public:
	bool                                               bIsFlying;                                                // 0x0300(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0301(0x0003) MISSED OFFSET
	float                                              f_FlyForwarRate;                                          // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              f_FlyRightRate;                                           // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x030C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.TailAnimInstance");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_CharacterRushForward
// 0x0048 (0x00B8 - 0x0070)
class UUAESkillAction_CharacterRushForward : public UUAESkillAction
{
public:
	bool                                               bStopMovementWhenHit;                                     // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              MinMoveDistance;                                          // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStandStillTime;                                        // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAbortMovementWhenFinished;                               // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              DamageToEnemy;                                            // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageToBuilding;                                         // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromTarget;                                    // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromBuilding;                                  // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepAwayFrom;                                            // 0x009C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRaycastObstacleFront;                                    // 0x009D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x009E(0x0002) MISSED OFFSET
	float                                              MinDistanceToObstacle;                                    // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ObstacleDetectSockets;                                    // 0x00A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_CharacterRushForward");
		return pStaticClass;
	}


	void HandleOnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class DBGame.UAESkillAction_LaunchProjectileActor
// 0x00F8 (0x0168 - 0x0070)
class UUAESkillAction_LaunchProjectileActor : public UUAESkillAction
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0070(0x0028) UNKNOWN PROPERTY: SoftClassProperty DBGame.UAESkillAction_LaunchProjectileActor.SoftProjectileActorTemplate
	bool                                               bPickFromTarget;                                          // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	class UUAESkillPicker*                             DamagePicker;                                             // 0x009C(0x0004) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUTSkillLocationPicker*                      LocationPicker;                                           // 0x00A0(0x0004) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bOnlySpawnActorInServer;                                  // 0x00A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUsingPlayerViewRotation;                               // 0x00A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EDBZProjectileInitLocationType                     InitLocationType;                                         // 0x00A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EDBZProjectileFlyDirectionType                     DirectionType;                                            // 0x00A7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     InitLocationBlackboardText;                               // 0x00A8(0x000C) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     ProjectileLineOffset;                                     // 0x00B4(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     TargetActorOffset;                                        // 0x00C0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRay;                                                   // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStartflyWithoutTarget;                                   // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseAutoDirection;                                        // 0x00DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedWeaponAttr;                                          // 0x00DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DamageInnerRadius;                                        // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageOuterRadius;                                        // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bExplodedAtActorLocation;                                 // 0x00EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRadiusExplode;                                     // 0x00ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	float                                              DelayFlyTime;                                             // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxLifeSpan;                                              // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedCheckMaxDistance;                                    // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsHoming;                                                // 0x0100(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	float                                              TurnDirectionRadSpeed;                                    // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeedMaxScale;                            // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HomingEscapeDistance;                                     // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHomingAllDirection;                                      // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              HomingAllDirectionRadius;                                 // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRandomStartVelocity;                                   // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              MinConeHalfAngleRadY;                                     // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadY;                                     // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinConeHalfAngleRadZ;                                     // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadZ;                                     // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFixStartVelocity;                                        // 0x012C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	float                                              FixOffsetY;                                               // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FixOffsetZ;                                               // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ProjectileStartDirection;                                 // 0x013C(0x000C) (IsPlainOldData)
	float                                              Speed;                                                    // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCachedTargetLocation;                                 // 0x014C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	float                                              InnerRadius;                                              // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShooterPredictionDeltaTime;                               // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletOriginalScale;                                      // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DynamicScaleTime;                                         // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DynamicScaleRate;                                         // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_LaunchProjectileActor");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_PlayMontageWithDBPose
// 0x00E0 (0x0368 - 0x0288)
class UUAESkillAction_PlayMontageWithDBPose : public UUAESkillAction_PlayMontage_Pose
{
public:
	struct FSkillPoseMontageDataDBZ                    PoseMontageDataDBZ;                                       // 0x0288(0x00D0) (Edit)
	struct FString                                     PlayRateAdjustAttrName;                                   // 0x0358(0x000C) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0364(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_PlayMontageWithDBPose");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_PlayMontageWithDBHeroPose
// 0x0038 (0x03A0 - 0x0368)
class UUAESkillAction_PlayMontageWithDBHeroPose : public UUAESkillAction_PlayMontageWithDBPose
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0368(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_PlayMontageWithDBHeroPose");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_SetCameraMoveToward
// 0x0020 (0x0090 - 0x0070)
class UUAESkillAction_SetCameraMoveToward : public UUAESkillAction
{
public:
	struct FVector                                     OffsetVec;                                                // 0x0070(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              LastingTime;                                              // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultApproachSpeed;                                     // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSkipMovementIfBlocked;                                   // 0x0084(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     BlockCheckChannel;                                        // 0x0085(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	float                                              BlockCheckDistanceOffset;                                 // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_SetCameraMoveToward");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_SetDBMovementState
// 0x0000 (0x0070 - 0x0070)
class UUAESkillAction_SetDBMovementState : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_SetDBMovementState");
		return pStaticClass;
	}

};


// Class DBGame.UTSkillAppearance_ParticleSystemDBZ
// 0x0010 (0x01C0 - 0x01B0)
class UUTSkillAppearance_ParticleSystemDBZ : public UUTSkillAppearance_ParticleSystem
{
public:
	struct FString                                     PlayRateAdjustAttrName;                                   // 0x01B0(0x000C) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UTSkillAppearance_ParticleSystemDBZ");
		return pStaticClass;
	}


	float GetPlayRateScale();
};


}

